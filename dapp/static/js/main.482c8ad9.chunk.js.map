{"version":3,"sources":["services/web3.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["window","ethereum","web3","Web3","enable","portis","Portis","provider","currentProvider","ERC20_METADATA_ABI","require","ERC20_ABI","ERC721_METADATA_ABI","ERC721_ABI","ERC721_ENUMERABLE_ABI","ERC165_ABI","toCents","amount","decimals","Number","toFixed","fromCents","isValidAddress","address","utils","isAddress","resolveName","name","a","test","eth","ens","getAddress","getAccounts","Promise","resolve","reject","error","accounts","getETHBalance","getBalance","balance","fromWei","transferETH","account","sendTransaction","from","to","value","toWei","once","confNumber","receipt","ERC20_name","contract","abi","Contract","methods","call","ERC20_symbol","symbol","ERC20_decimals","ERC20_balanceOf","balanceOf","ERC20_transfer","transfer","send","getERC20Name","getERC20Symbol","getERC20Balance","transferERC20","ERC721_name","ERC721_symbol","ERC721_tokenURI","tokenId","tokenURI","ERC721_balanceOf","ERC721_tokenOfOwnerByIndex","index","tokenOfOwnerByIndex","ERC721_safeTransferFrom","data","safeTransferFrom","getERC721Name","getERC721Symbol","getERC721TokenURI","getERC721Balance","getERC721TokenIdByIndex","String","transferERC721","supportsERC721","ERC165_supportsInterface","interfaceId","supportsInterface","ETHPanel","useState","setBalance","updateBalance","useEffect","ETHTransferForm","onTransfer","setAddress","setAmount","event","preventDefault","xaddress","onSubmit","type","onChange","e","target","ERC20Panel","setName","_symbol","setSymbol","updateName","updateSymbol","ERC20TransferForm","ERC721Panel","tokens","setTokens","i","Object","keys","map","token","key","ERC721TransferForm","setTokenId","AddTokenForm","onAddToken","Wallet","contracts","setContracts","toLowerCase","isNFT","length","Fragment","AccountPanel","className","App","setAccounts","setAccount","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.482c8ad9.chunk.js","sourcesContent":["import Portis from '@portis/web3';\nimport Web3 from 'web3';\n\ndeclare global {\n  interface Window { ethereum: any; web3: any; }\n}\n\nif (window.ethereum) {\n  window.web3 = new Web3(window.ethereum);\n  window.ethereum.enable(); // should wait?\n}\n\nif (!window.web3) {\n  const DAPP_ID = 'a0fa4f71-2d8e-4a67-baa6-33ab41c3ba26';\n  const portis = new Portis(DAPP_ID, 'mainnet');\n  window.web3 = new Web3(portis.provider);\n}\n\nconst web3 = new Web3(window.web3.currentProvider);\n\nconst ERC20_METADATA_ABI = require('../contracts/ERC20Metadata.json');\nconst ERC20_ABI = require('../contracts/ERC20.json');\nconst ERC721_METADATA_ABI = require('../contracts/ERC721Metadata.json');\nconst ERC721_ABI = require('../contracts/ERC721.json');\nconst ERC721_ENUMERABLE_ABI = require('../contracts/ERC721Enumerable.json');\nconst ERC165_ABI = require('../contracts/ERC165.json');\n\n// const ERC721_METADATA_INTERFACE_ID = '0x5b5e139f';\nconst ERC721_INTERFACE_ID = '0x80ac58cd';\n// const ERC721_ENUMERABLE_INTERFACE_ID = '0x780e9d63';\n\nfunction toCents(amount: string, decimals: number): string {\n  return (Number(amount) * (10 ** decimals)).toFixed(0);\n}\n\nfunction fromCents(amount: string, decimals: number): string {\n  return (Number(amount) / (10 ** decimals)).toFixed(decimals);\n}\n\nexport function isValidAddress(address: string): boolean {\n  return web3.utils.isAddress(address);\n}\n\nexport async function resolveName(name: string): Promise<string> {\n  if (/^0x[0-9A-Fa-f]{40}$/.test(name)) return name;\n  return web3.eth.ens.getAddress(name);\n}\n\nexport async function getAccounts(): Promise<string[]> {\n  return new Promise((resolve, reject) => {\n    web3.eth.getAccounts((error, accounts) => {\n      if (error) return reject(error);\n      return resolve(accounts);\n    });\n  });\n}\n\nexport async function getETHBalance(address: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    web3.eth.getBalance(address, 'latest', (error, balance) => {\n      if (error) return reject(error);\n      return resolve(web3.utils.fromWei(balance, 'ether'));\n    });\n  });\n}\n\nexport async function transferETH(account: string, address: string, amount: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    web3.eth.sendTransaction({ from: account, to: address, value: web3.utils.toWei(amount, 'ether') })\n      .once('confirmation', (confNumber: any, receipt: any) => resolve())\n      .once('error', reject);\n  });\n}\n\nasync function ERC20_name(contract: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC20_METADATA_ABI, contract);\n  return abi.methods.name().call();\n}\n\nasync function ERC20_symbol(contract: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC20_METADATA_ABI, contract);\n  return abi.methods.symbol().call();\n}\n\nasync function ERC20_decimals(contract: string): Promise<number> {\n  const abi = new web3.eth.Contract(ERC20_METADATA_ABI, contract);\n  return Number(await abi.methods.decimals().call());\n}\n\nasync function ERC20_balanceOf(contract: string, address: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC20_ABI, contract);\n  return abi.methods.balanceOf(address).call();\n}\n\nasync function ERC20_transfer(account: string, contract: string, address: string, amount: string): Promise<void> {\n  const abi = new web3.eth.Contract(ERC20_ABI, contract);\n  return new Promise((resolve, reject) => {\n    abi.methods.transfer(address, amount)\n      .send({ from: account })\n      .once('confirmation', (confNumber: any, receipt: any) => resolve())\n      .once('error', reject);\n  });\n}\n\nexport async function getERC20Name(contract: string): Promise<string> {\n  return ERC20_name(contract);\n}\n\nexport async function getERC20Symbol(contract: string): Promise<string> {\n  return ERC20_symbol(contract);\n}\n\nexport async function getERC20Balance(account: string, contract: string): Promise<string> {\n  const decimals = await ERC20_decimals(contract);\n  const balance = await ERC20_balanceOf(contract, account);\n  return fromCents(balance, decimals);\n}\n\nexport async function transferERC20(account: string, contract: string, address: string, amount: string): Promise<void> {\n  const decimals = await ERC20_decimals(contract);\n  return ERC20_transfer(account, contract, address, toCents(amount, decimals));\n}\n\nasync function ERC721_name(contract: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC721_METADATA_ABI, contract);\n  return abi.methods.name().call();\n}\n\nasync function ERC721_symbol(contract: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC721_METADATA_ABI, contract);\n  return abi.methods.symbol().call();\n}\n\nasync function ERC721_tokenURI(contract: string, tokenId: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC721_METADATA_ABI, contract);\n  return abi.methods.tokenURI(tokenId).call();\n}\n\nasync function ERC721_balanceOf(contract: string, address: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC721_ABI, contract);\n  return abi.methods.balanceOf(address).call();\n}\n\nasync function ERC721_tokenOfOwnerByIndex(contract: string, address: string, index: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC721_ENUMERABLE_ABI, contract);\n  return abi.methods.tokenOfOwnerByIndex(address, index).call();\n}\n\nasync function ERC721_safeTransferFrom(account: string, contract: string, address: string, tokenId: string, data: string): Promise<void> {\n  const abi = new web3.eth.Contract(ERC721_ABI, contract);\n  return new Promise((resolve, reject) => {\n    abi.methods.safeTransferFrom(account, address, tokenId, data)\n      .send({ from: account })\n      .once('confirmation', (confNumber: any, receipt: any) => resolve())\n      .once('error', reject);\n  });\n}\n\nexport async function getERC721Name(contract: string): Promise<string> {\n  return ERC721_name(contract);\n}\n\nexport async function getERC721Symbol(contract: string): Promise<string> {\n  return ERC721_symbol(contract);\n}\n\nexport async function getERC721TokenURI(contract: string, tokenId: string): Promise<string> {\n  return ERC721_tokenURI(contract, tokenId);\n}\n\nexport async function getERC721Balance(account: string, contract: string): Promise<string> {\n  const balance = await ERC721_balanceOf(contract, account);\n  return fromCents(balance, 0);\n}\n\nexport async function getERC721TokenIdByIndex(account: string, contract: string, index: number): Promise<string> {\n  return ERC721_tokenOfOwnerByIndex(contract, account, String(index));\n}\n\nexport async function transferERC721(account: string, contract: string, address: string, tokenId: string, data: string): Promise<void> {\n  return ERC721_safeTransferFrom(account, contract, address, tokenId, data);\n}\n\nexport async function supportsERC721(contract: string): Promise<boolean> {\n  return ERC165_supportsInterface(contract, ERC721_INTERFACE_ID);\n}\n\nasync function ERC165_supportsInterface(contract: string, interfaceId: string): Promise<boolean> {\n  const abi = new web3.eth.Contract(ERC165_ABI, contract);\n  return abi.methods.supportsInterface(interfaceId).call();\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  isValidAddress,\n  resolveName,\n  getAccounts,\n  getETHBalance,\n  transferETH,\n  getERC20Name,\n  getERC20Symbol,\n  getERC20Balance,\n  transferERC20,\n  getERC721Name,\n  getERC721Symbol,\n  getERC721TokenURI,\n  getERC721Balance,\n  getERC721TokenIdByIndex,\n  transferERC721,\n  supportsERC721,\n} from '../services/web3';\n\nfunction ETHPanel({ account }: { account: string }) {\n  const [balance, setBalance] = useState('');\n  useEffect(() => { updateBalance() }, [account]);\n  async function updateBalance() {\n    setBalance(await getETHBalance(account));\n  }\n  async function onTransfer(address: string, amount: string) {\n    await transferETH(account, address, amount);\n    await updateBalance();\n  }\n  return (\n    <div>\n      Ethereum {account}<br/>\n      <label>Balance</label> {balance} ETH\n      <ETHTransferForm onTransfer={onTransfer} />\n    </div>\n  );\n}\n\nfunction ETHTransferForm({ onTransfer } : { onTransfer: (address: string, amount: string) => Promise<void> }) {\n  const [address, setAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  async function onSubmit(event: React.FormEvent) {\n    if (event) event.preventDefault();\n    const xaddress = await resolveName(address);\n    if (!isValidAddress(xaddress)) return;\n    await onTransfer(xaddress, amount);\n    setAddress('');\n    setAmount('');\n  }\n  return (\n      <form onSubmit={onSubmit}>\n        <input name=\"address\" type=\"string\" value={address} onChange={(e) => setAddress(e.target.value)} />\n        <input name=\"amount\" type=\"string\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n        <button type=\"submit\">Transfer</button>\n      </form>\n  );\n}\n\nfunction ERC20Panel({ account, contract }: { account: string; contract: string }) {\n  const [name, setName] = useState('');\n  const [_symbol, setSymbol] = useState('');\n  const [balance, setBalance] = useState('');\n  useEffect(() => { updateName() }, [contract]);\n  useEffect(() => { updateSymbol() }, [contract]);\n  useEffect(() => { updateBalance() }, [account, contract]);\n  async function updateName() {\n    setName(await getERC20Name(contract));\n  }\n  async function updateSymbol() {\n    setSymbol(await getERC20Symbol(contract));\n  }\n  async function updateBalance() {\n    setBalance(await getERC20Balance(account, contract));\n  }\n  async function onTransfer(address: string, amount: string) {\n    await transferERC20(account, contract, address, amount);\n    await updateBalance();\n  }\n  return (\n    <div>\n      {name} {contract}<br/>\n      <label>Balance</label> {balance} {_symbol}\n      <ERC20TransferForm onTransfer={onTransfer} />\n    </div>\n  );\n}\n\nfunction ERC20TransferForm({ onTransfer } : { onTransfer: (address: string, amount: string) => Promise<void> }) {\n  const [address, setAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  async function onSubmit(event: React.FormEvent) {\n    if (event) event.preventDefault();\n    const xaddress = await resolveName(address);\n    if (!isValidAddress(xaddress)) return;\n    await onTransfer(xaddress, amount);\n    setAddress('');\n    setAmount('');\n  }\n  return (\n    <form onSubmit={onSubmit}>\n      <input name=\"address\" type=\"string\" value={address} onChange={(e) => setAddress(e.target.value)} />\n      <input name=\"amount\" type=\"string\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n      <button type=\"submit\">Transfer</button>\n    </form>\n  );\n}\n\nfunction ERC721Panel({ account, contract }: { account: string; contract: string }) {\n  const [name, setName] = useState('');\n  const [_symbol, setSymbol] = useState('');\n  const [balance, setBalance] = useState('');\n  const [tokens, setTokens] = useState<{ [token: string]: string }>({});\n  useEffect(() => { updateName() }, [contract]);\n  useEffect(() => { updateSymbol() }, [contract]);\n  useEffect(() => { updateBalance() }, [account, contract]);\n  async function updateName() {\n    setName(await getERC721Name(contract));\n  }\n  async function updateSymbol() {\n    setSymbol(await getERC721Symbol(contract));\n  }\n  async function updateBalance() {\n    const balance = await getERC721Balance(account, contract);\n    const tokens: { [token: string]: string } = {};\n    for (let i = 0; i < Number(balance); i++) {\n      const tokenId = await getERC721TokenIdByIndex(account, contract, i);\n      const tokenURI = await getERC721TokenURI(contract, tokenId);\n      tokens[tokenId] = tokenURI;\n    }\n    setBalance(balance);\n    setTokens(tokens);\n  }\n  async function onTransfer(address: string, tokenId: string) {\n    await transferERC721(account, contract, address, tokenId, '0x');\n    await updateBalance();\n  }\n  return (\n    <div>\n      {name} {contract}<br/>\n      <label>Balance</label> {balance} {_symbol}\n      {Object.keys(tokens).map((token, i) =>\n        <div key={i}>Token {token} {tokens[token]}</div>\n      )}\n      <ERC721TransferForm onTransfer={onTransfer} />\n    </div>\n  );\n}\n\nfunction ERC721TransferForm({ onTransfer } : { onTransfer: (address: string, tokenId: string) => Promise<void> }) {\n  const [address, setAddress] = useState('');\n  const [tokenId, setTokenId] = useState('');\n  async function onSubmit(event: React.FormEvent) {\n    if (event) event.preventDefault();\n    const xaddress = await resolveName(address);\n    if (!isValidAddress(xaddress)) return;\n    await onTransfer(xaddress, tokenId);\n    setAddress('');\n    setTokenId('');\n  }\n  return (\n    <form onSubmit={onSubmit}>\n      <input name=\"address\" type=\"string\" value={address} onChange={(e) => setAddress(e.target.value)} />\n      <input name=\"tokenId\" type=\"string\" value={tokenId} onChange={(e) => setTokenId(e.target.value)} />\n      <button type=\"submit\">Transfer</button>\n    </form>\n  );\n}\n\nfunction AddTokenForm({ onAddToken } : { onAddToken: (contract: string) => Promise<void> }) {\n  const [address, setAddress] = useState('');\n  async function onSubmit(event: React.FormEvent) {\n    if (event) event.preventDefault();\n    const xaddress = await resolveName(address);\n    if (!isValidAddress(xaddress)) return;\n    await onAddToken(xaddress);\n    setAddress('');\n  }\n  return (\n      <form onSubmit={onSubmit}>\n        <input name=\"address\" type=\"string\" value={address} onChange={(e) => setAddress(e.target.value)} />\n        <button type=\"submit\">Add Token</button>\n      </form>\n  );\n}\n\nfunction Wallet({ account }: { account: string }) {\n  const [contracts, setContracts] = useState<{ [address: string]: 'ERC20' | 'ERC721' }>({});\n  async function onAddToken(contract: string) {\n    const address = contract.toLowerCase();\n    if (contracts[address]) return;\n    let isNFT = false;\n    try { isNFT = await supportsERC721(contract); } catch (e) { }\n    setContracts({ ...contracts, [address]: isNFT ? 'ERC721' : 'ERC20' });\n  }\n  return (\n    <div>\n      <ETHPanel account={account} />\n      {Object.keys(contracts).length > 0\n        ? Object.keys(contracts).map((contract, i) =>\n            <React.Fragment key={i}>\n            {contracts[contract] === 'ERC20'\n              ? <ERC20Panel account={account} contract={contract} />\n              : null\n            }\n            {contracts[contract] === 'ERC721'\n              ? <ERC721Panel account={account} contract={contract} />\n              : null\n            }\n            </React.Fragment>\n          )\n        : 'Empty token list'\n      }\n      <AddTokenForm onAddToken={onAddToken} />\n    </div>\n  );\n}\n\nfunction AccountPanel({ account }: { account: string }) {\n  return (\n    <div className=\"AccountPanel\">\n      <Wallet account={account} />\n    </div>\n  );\n}\n\nfunction App() {\n  const [accounts, setAccounts] = useState<string[] | null>(null);\n  const [account, setAccount] = useState('');\n  useEffect(() => {\n    (async () => setAccounts(await getAccounts()))();\n  }, []);\n  useEffect(() => {\n    if (accounts === null) return;\n    if (accounts.length === 0) return;\n    setAccount(accounts[0]);\n  }, [accounts])\n  return (\n    <div className=\"App\">\n      {accounts\n        ? (<select onChange={(e) => setAccount(e.target.value)} value={account}>\n            {account === ''\n              ? (<option key={0} value={''}>No account selected</option>)\n              : null\n            }\n            {accounts.map((account, i) =>\n              <option key={i+1} value={account}>{account}</option>\n            )}\n          </select>)\n        : 'No accounts available'\n      }\n      {account\n        ? <AccountPanel account={account} />\n        : null\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}