{"version":3,"sources":["services/web3.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["window","ethereum","web3","Web3","enable","portis","Portis","provider","currentProvider","NFTFY_ABI","require","WRAPPER_ABI","SHARES_ABI","ERC20_METADATA_ABI","ERC20_ABI","ERC721_METADATA_ABI","ERC721_ABI","ERC721_ENUMERABLE_ABI","ERC165_ABI","getNftfyContract","a","eth","net","getNetworkType","network","Error","toCents","amount","decimals","Number","toFixed","fromCents","isValidAddress","address","utils","isAddress","resolveName","name","test","ens","getAddress","getAccounts","Promise","resolve","reject","error","accounts","getETHBalance","getBalance","balance","fromWei","transferETH","account","sendTransaction","from","to","value","toWei","once","confNumber","receipt","ERC20_name","contract","abi","Contract","methods","call","ERC20_symbol","symbol","ERC20_decimals","ERC20_balanceOf","balanceOf","ERC20_transfer","transfer","send","getERC20Name","getERC20Symbol","getERC20Balance","transferERC20","ERC721_name","ERC721_symbol","ERC721_tokenURI","tokenId","tokenURI","ERC721_balanceOf","ERC721_tokenOfOwnerByIndex","index","tokenOfOwnerByIndex","ERC721_safeTransferFrom","data","safeTransferFrom","getERC721Name","getERC721Symbol","getERC721TokenURI","getERC721Balance","getERC721TokenIdByIndex","String","transferERC721","supportsERC721","ERC165_supportsInterface","interfaceId","supportsInterface","Nftfy_getWrapper","getWrapper","Wrapper_getShares","getShares","Shares_isRedeemable","isRedeemable","Shares_getSharePrice","getSharePrice","Shares_release","release","Shares_redeem","redeem","wrap","toHex","substr","padStart","price","Content","Layout","Footer","Header","Option","Select","ETHPanel","useState","setBalance","updateBalance","useEffect","direction","size","plain","title","ETHTransferForm","onTransfer","setAddress","setAmount","loading","setLoading","event","preventDefault","xaddress","onSubmit","addonAfter","placeholder","onChange","e","target","addonBefore","htmlType","ERC20Panel","onRemoveToken","onAddToken","setName","_symbol","setSymbol","redeemable","setRedeemable","updateName","updateSymbol","updateRedeemable","ERC20TransferForm","ERC20RedeemForm","onRedeem","ERC20ForgetForm","type","shape","ERC721Panel","tokens","setTokens","wrapper","setWrapper","wokens","setWokens","setTokenId","i","updateWrapper","shares","Group","Object","keys","map","token","woken","ERC721TransferForm","ERC721WrapForm","onWrap","ERC721UnwrapForm","onUnwrap","ERC721ForgetForm","AddTokenForm","Wallet","JSON","parse","localStorage","getItem","contracts","setContracts","toLowerCase","isNFT","copy","setItem","stringify","length","Fragment","key","AccountPanel","className","App","setAccounts","setAccount","style","color","src","textAlign","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.69428d85.chunk.js","sourcesContent":["import Portis from '@portis/web3';\nimport Web3 from 'web3';\n\ndeclare global {\n  interface Window { ethereum: any; web3: any; }\n}\n\nif (window.ethereum) {\n  window.web3 = new Web3(window.ethereum);\n  window.ethereum.enable(); // should wait?\n}\n\nif (!window.web3) {\n  const DAPP_ID = 'a0fa4f71-2d8e-4a67-baa6-33ab41c3ba26';\n  const portis = new Portis(DAPP_ID, 'mainnet');\n  window.web3 = new Web3(portis.provider);\n}\n\nconst web3 = new Web3(window.web3.currentProvider);\n\nconst NFTFY_CONTRACT_RINKEBY = '0xc0D1946C1754d2F94dE4Cf52deF7162f6611316D';\n\nconst NFTFY_ABI = require('../contracts/Nftfy.json');\nconst WRAPPER_ABI = require('../contracts/Wrapper.json');\nconst SHARES_ABI = require('../contracts/Shares.json');\n\nconst ERC20_METADATA_ABI = require('../contracts/ERC20Metadata.json');\nconst ERC20_ABI = require('../contracts/ERC20.json');\nconst ERC721_METADATA_ABI = require('../contracts/ERC721Metadata.json');\nconst ERC721_ABI = require('../contracts/ERC721.json');\nconst ERC721_ENUMERABLE_ABI = require('../contracts/ERC721Enumerable.json');\nconst ERC165_ABI = require('../contracts/ERC165.json');\n\n// const ERC721_METADATA_INTERFACE_ID = '0x5b5e139f';\nconst ERC721_INTERFACE_ID = '0x80ac58cd';\n// const ERC721_ENUMERABLE_INTERFACE_ID = '0x780e9d63';\n\nexport async function getNftfyContract(): Promise<string> {\n  const network = await web3.eth.net.getNetworkType();\n  switch (network) {\n  // TODO main\n  case 'rinkeby': return NFTFY_CONTRACT_RINKEBY;\n  default: throw new Error('Unsupported network');\n  }\n}\n\nfunction toCents(amount: string, decimals: number): string {\n  return (Number(amount) * (10 ** decimals)).toFixed(0);\n}\n\nfunction fromCents(amount: string, decimals: number): string {\n  return (Number(amount) / (10 ** decimals)).toFixed(decimals);\n}\n\nexport function isValidAddress(address: string): boolean {\n  return web3.utils.isAddress(address);\n}\n\nexport async function resolveName(name: string): Promise<string> {\n  if (/^0x[0-9A-Fa-f]{40}$/.test(name)) return name;\n  return web3.eth.ens.getAddress(name);\n}\n\nexport async function getAccounts(): Promise<string[]> {\n  return new Promise((resolve, reject) => {\n    web3.eth.getAccounts((error, accounts) => {\n      if (error) return reject(error);\n      return resolve(accounts);\n    });\n  });\n}\n\nexport async function getETHBalance(address: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    web3.eth.getBalance(address, 'latest', (error, balance) => {\n      if (error) return reject(error);\n      return resolve(web3.utils.fromWei(balance, 'ether'));\n    });\n  });\n}\n\nexport async function transferETH(account: string, address: string, amount: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    web3.eth.sendTransaction({ from: account, to: address, value: web3.utils.toWei(amount, 'ether') })\n      .once('confirmation', (confNumber: any, receipt: any) => resolve())\n      .once('error', reject);\n  });\n}\n\nasync function ERC20_name(contract: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC20_METADATA_ABI, contract);\n  return abi.methods.name().call();\n}\n\nasync function ERC20_symbol(contract: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC20_METADATA_ABI, contract);\n  return abi.methods.symbol().call();\n}\n\nasync function ERC20_decimals(contract: string): Promise<number> {\n  const abi = new web3.eth.Contract(ERC20_METADATA_ABI, contract);\n  return Number(await abi.methods.decimals().call());\n}\n\nasync function ERC20_balanceOf(contract: string, address: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC20_ABI, contract);\n  return abi.methods.balanceOf(address).call();\n}\n\nasync function ERC20_transfer(account: string, contract: string, address: string, amount: string): Promise<void> {\n  const abi = new web3.eth.Contract(ERC20_ABI, contract);\n  return new Promise((resolve, reject) => {\n    abi.methods.transfer(address, amount)\n      .send({ from: account })\n      .once('confirmation', (confNumber: any, receipt: any) => resolve())\n      .once('error', reject);\n  });\n}\n\nexport async function getERC20Name(contract: string): Promise<string> {\n  return ERC20_name(contract);\n}\n\nexport async function getERC20Symbol(contract: string): Promise<string> {\n  return ERC20_symbol(contract);\n}\n\nexport async function getERC20Balance(account: string, contract: string): Promise<string> {\n  const decimals = await ERC20_decimals(contract);\n  const balance = await ERC20_balanceOf(contract, account);\n  return fromCents(balance, decimals);\n}\n\nexport async function transferERC20(account: string, contract: string, address: string, amount: string): Promise<void> {\n  const decimals = await ERC20_decimals(contract);\n  return ERC20_transfer(account, contract, address, toCents(amount, decimals));\n}\n\nasync function ERC721_name(contract: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC721_METADATA_ABI, contract);\n  return abi.methods.name().call();\n}\n\nasync function ERC721_symbol(contract: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC721_METADATA_ABI, contract);\n  return abi.methods.symbol().call();\n}\n\nasync function ERC721_tokenURI(contract: string, tokenId: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC721_METADATA_ABI, contract);\n  return abi.methods.tokenURI(tokenId).call();\n}\n\nasync function ERC721_balanceOf(contract: string, address: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC721_ABI, contract);\n  return abi.methods.balanceOf(address).call();\n}\n\nasync function ERC721_tokenOfOwnerByIndex(contract: string, address: string, index: string): Promise<string> {\n  const abi = new web3.eth.Contract(ERC721_ENUMERABLE_ABI, contract);\n  return abi.methods.tokenOfOwnerByIndex(address, index).call();\n}\n\nasync function ERC721_safeTransferFrom(account: string, contract: string, address: string, tokenId: string, data: string): Promise<void> {\n  const abi = new web3.eth.Contract(ERC721_ABI, contract);\n  return new Promise((resolve, reject) => {\n    abi.methods.safeTransferFrom(account, address, tokenId, data)\n      .send({ from: account })\n      .once('confirmation', (confNumber: any, receipt: any) => resolve())\n      .once('error', reject);\n  });\n}\n\nexport async function getERC721Name(contract: string): Promise<string> {\n  return ERC721_name(contract);\n}\n\nexport async function getERC721Symbol(contract: string): Promise<string> {\n  return ERC721_symbol(contract);\n}\n\nexport async function getERC721TokenURI(contract: string, tokenId: string): Promise<string> {\n  return ERC721_tokenURI(contract, tokenId);\n}\n\nexport async function getERC721Balance(account: string, contract: string): Promise<string> {\n  const balance = await ERC721_balanceOf(contract, account);\n  return fromCents(balance, 0);\n}\n\nexport async function getERC721TokenIdByIndex(account: string, contract: string, index: number): Promise<string> {\n  return ERC721_tokenOfOwnerByIndex(contract, account, String(index));\n}\n\nexport async function transferERC721(account: string, contract: string, address: string, tokenId: string, data = '0x'): Promise<void> {\n  return ERC721_safeTransferFrom(account, contract, address, tokenId, data);\n}\n\nexport async function supportsERC721(contract: string): Promise<boolean> {\n  return ERC165_supportsInterface(contract, ERC721_INTERFACE_ID);\n}\n\nasync function ERC165_supportsInterface(contract: string, interfaceId: string): Promise<boolean> {\n  const abi = new web3.eth.Contract(ERC165_ABI, contract);\n  return abi.methods.supportsInterface(interfaceId).call();\n}\n\nasync function Nftfy_getWrapper(contract: string, address: string): Promise<string> {\n  const abi = new web3.eth.Contract(NFTFY_ABI, contract);\n  return abi.methods.getWrapper(address).call();\n}\n\nasync function Wrapper_getShares(contract: string, tokenId: string): Promise<string> {\n  const abi = new web3.eth.Contract(WRAPPER_ABI, contract);\n  return abi.methods.getShares(tokenId).call();\n}\n\nasync function Shares_isRedeemable(contract: string): Promise<boolean> {\n  const abi = new web3.eth.Contract(SHARES_ABI, contract);\n  return abi.methods.isRedeemable().call();\n}\n\nasync function Shares_getSharePrice(contract: string): Promise<string> {\n  const abi = new web3.eth.Contract(SHARES_ABI, contract);\n  return abi.methods.getSharePrice().call();\n}\n\nasync function Shares_release(account: string, contract: string, amount: string): Promise<void> {\n  const abi = new web3.eth.Contract(SHARES_ABI, contract);\n  return new Promise((resolve, reject) => {\n    abi.methods.release()\n      .send({ from: account, value: amount })\n      .once('confirmation', (confNumber: any, receipt: any) => resolve())\n      .once('error', reject);\n  });\n}\n\nasync function Shares_redeem(account: string, contract: string): Promise<void> {\n  const abi = new web3.eth.Contract(SHARES_ABI, contract);\n  return new Promise((resolve, reject) => {\n    abi.methods.redeem()\n      .send({ from: account })\n      .once('confirmation', (confNumber: any, receipt: any) => resolve())\n      .once('error', reject);\n  });\n}\n\nexport async function getWrapper(address: string): Promise<string> {\n  const contract = await getNftfyContract();\n  return Nftfy_getWrapper(contract, address);\n}\n\nexport async function wrap(account: string, contract: string, tokenId: string, amount: string): Promise<void> {\n  const address = await getNftfyContract();\n  let data = web3.utils.toHex(web3.utils.toWei(amount, 'ether'));\n  data = data.substr(0, 2) + data.substr(2).padStart(64, '0');\n  await transferERC721(account, contract, address, tokenId, data);\n}\n\nexport async function getShares(contract: string, tokenId: string): Promise<string> {\n  return Wrapper_getShares(contract, tokenId);\n}\n\nexport async function isRedeemable(contract: string): Promise<boolean> {\n  return Shares_isRedeemable(contract);\n}\n\nexport async function getSharePrice(contract: string): Promise<string> {\n  const price = await Shares_getSharePrice(contract);\n  return web3.utils.fromWei(price, 'ether');\n}\n\nexport async function release(account: string, contract: string, amount: string): Promise<void> {\n  return Shares_release(account, contract, web3.utils.toWei(amount, 'ether'));\n}\n\nexport async function redeem(account: string, contract: string): Promise<void> {\n  return Shares_redeem(account, contract);\n}\n\n","import React, { useEffect, useState } from 'react';\nimport { Avatar, Button, Card, Divider, Input, Layout, Radio, Select, Space, Statistic } from 'antd';\n// import { Pie } from 'ant-design-pro/lib/Charts';\nimport {\n  isValidAddress,\n  resolveName,\n  getAccounts,\n  getETHBalance,\n  transferETH,\n  getERC20Name,\n  getERC20Symbol,\n  getERC20Balance,\n  transferERC20,\n  getERC721Name,\n  getERC721Symbol,\n  getERC721TokenURI,\n  getERC721Balance,\n  getERC721TokenIdByIndex,\n  transferERC721,\n  supportsERC721,\n  getWrapper,\n  wrap,\n  getShares,\n  isRedeemable,\n  getSharePrice,\n  release,\n  redeem,\n} from '../services/web3';\n\nconst { Content, Footer, Header } = Layout;\nconst { Option } = Select;\n\nfunction ETHPanel({ account }: { account: string }) {\n  const [balance, setBalance] = useState('');\n  useEffect(() => { updateBalance() }, [account]);\n  async function updateBalance() {\n    setBalance(await getETHBalance(account));\n  }\n  async function onTransfer(address: string, amount: string) {\n    await transferETH(account, address, amount);\n    await updateBalance();\n  }\n  return (\n    <Card>\n      <Space direction=\"vertical\">\n        <Space>\n          <Avatar size=\"large\">ETH</Avatar>\n          Ether\n        </Space>\n        <Divider plain>Content</Divider>\n        <Statistic title=\"Balance\" value={balance} />\n        <Divider plain>Actions</Divider>\n        <ETHTransferForm onTransfer={onTransfer} />\n      </Space>\n    </Card>\n  );\n}\n\nfunction ETHTransferForm({ onTransfer } : { onTransfer: (address: string, amount: string) => Promise<void> }) {\n  const [address, setAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  const [loading, setLoading] = useState(false);\n  async function onSubmit(event: React.FormEvent) {\n    if (event) event.preventDefault();\n    setLoading(true);\n    try {\n      const xaddress = await resolveName(address);\n      if (!isValidAddress(xaddress)) return;\n      await onTransfer(xaddress, amount);\n      setAddress('');\n      setAmount('');\n    } finally {\n      setLoading(false);\n    }\n  }\n  return (\n      <form onSubmit={onSubmit}>\n        <Space>\n          <Input addonAfter=\"ETH\" placeholder=\"amount\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n          <Input addonBefore=\"@\" placeholder=\"receiver\" value={address} onChange={(e) => setAddress(e.target.value)} />\n          <Button loading={loading} htmlType=\"submit\">Transfer</Button>\n        </Space>\n      </form>\n  );\n}\n\nfunction ERC20Panel({ account, contract, onAddToken, onRemoveToken }: { account: string; contract: string; onAddToken: (contract: string) => Promise<void>, onRemoveToken: (contract: string) => Promise<void> }) {\n  const [name, setName] = useState('');\n  const [_symbol, setSymbol] = useState('');\n  const [balance, setBalance] = useState('');\n  const [redeemable, setRedeemable] = useState(false);\n  useEffect(() => { updateName() }, [contract]);\n  useEffect(() => { updateSymbol() }, [contract]);\n  useEffect(() => { updateBalance() }, [account, contract]);\n  useEffect(() => { updateRedeemable() }, [contract]);\n  async function updateName() {\n    setName(await getERC20Name(contract));\n  }\n  async function updateSymbol() {\n    setSymbol(await getERC20Symbol(contract));\n  }\n  async function updateBalance() {\n    setBalance(await getERC20Balance(account, contract));\n  }\n  async function updateRedeemable() {\n    setRedeemable(await isRedeemable(contract));\n  }\n  async function onTransfer(address: string, amount: string) {\n    await transferERC20(account, contract, address, amount);\n    await updateBalance();\n  }\n  async function onRedeem() {\n    await redeem(account, contract);\n    await updateBalance();\n  }\n  return (\n    <Card>\n      <Space direction=\"vertical\">\n        <Space>\n          <Avatar size=\"large\">{_symbol}</Avatar>\n          {name}\n        </Space>\n        <Divider plain>Content</Divider>\n        <Statistic title=\"Balance\" value={balance} />\n        <Divider>Actions</Divider>\n        <ERC20TransferForm _symbol={_symbol} onTransfer={onTransfer} />\n        {redeemable && Number(balance) > 0\n          ? (<ERC20RedeemForm onRedeem={onRedeem} />)\n          : null\n        }\n        <ERC20ForgetForm contract={contract} onRemoveToken={onRemoveToken} />\n      </Space>\n    </Card>\n  );\n}\n\nfunction ERC20TransferForm({ _symbol, onTransfer } : { _symbol: string; onTransfer: (address: string, amount: string) => Promise<void> }) {\n  const [address, setAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  const [loading, setLoading] = useState(false);\n  async function onSubmit(event: React.FormEvent) {\n    if (event) event.preventDefault();\n    setLoading(true);\n    try {\n      const xaddress = await resolveName(address);\n      if (!isValidAddress(xaddress)) return;\n      await onTransfer(xaddress, amount);\n      setAddress('');\n      setAmount('');\n    } finally {\n      setLoading(false);\n    }\n  }\n  return (\n    <form onSubmit={onSubmit}>\n      <Space>\n        <Input addonAfter={_symbol} placeholder=\"amount\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n        <Input addonBefore=\"@\" placeholder=\"receiver\" value={address} onChange={(e) => setAddress(e.target.value)} />\n        <Button loading={loading} htmlType=\"submit\">Transfer</Button>\n      </Space>\n    </form>\n  );\n}\n\nfunction ERC20RedeemForm({ onRedeem } : { onRedeem: () => Promise<void> }) {\n  const [loading, setLoading] = useState(false);\n  async function onSubmit(event: React.FormEvent) {\n    if (event) event.preventDefault();\n    setLoading(true);\n    try {\n      await onRedeem();\n    } finally {\n      setLoading(false);\n    }\n  }\n  return (\n    <form onSubmit={onSubmit}>\n      <Space>\n        <Button loading={loading} htmlType=\"submit\">Redeem</Button>\n      </Space>\n    </form>\n  );\n}\n\nfunction ERC20ForgetForm({ contract, onRemoveToken } : { contract: string; onRemoveToken: (contract: string) => Promise<void> }) {\n  const [loading, setLoading] = useState(false);\n  async function onSubmit(event: React.FormEvent) {\n    if (event) event.preventDefault();\n    setLoading(true);\n    try {\n      await onRemoveToken(contract);\n    } finally {\n      setLoading(false);\n    }\n  }\n  return (\n    <form onSubmit={onSubmit}>\n      <Space>\n        <Button type=\"primary\" shape=\"round\" loading={loading} htmlType=\"submit\">Forget Token</Button>\n      </Space>\n    </form>\n  );\n}\n\nfunction ERC721Panel({ account, contract, onAddToken, onRemoveToken }: { account: string; contract: string; onAddToken: (contract: string) => Promise<void>, onRemoveToken: (contract: string) => Promise<void> }) {\n  const [name, setName] = useState('');\n  const [_symbol, setSymbol] = useState('');\n  const [balance, setBalance] = useState('');\n  const [tokens, setTokens] = useState<{ [token: string]: { tokenURI: string } }>({});\n  const [wrapper, setWrapper] = useState('');\n  const [wokens, setWokens] = useState<{ [token: string]: { tokenURI: string, shares: string, balance: string, price: string } }>({});\n  const [tokenId, setTokenId] = useState('');\n  useEffect(() => { updateName() }, [contract]);\n  useEffect(() => { updateSymbol() }, [contract]);\n  useEffect(() => { updateBalance() }, [account, contract]);\n  useEffect(() => { updateWrapper() }, [contract]);\n  async function updateName() {\n    setName(await getERC721Name(contract));\n  }\n  async function updateSymbol() {\n    setSymbol(await getERC721Symbol(contract));\n  }\n  async function updateBalance() {\n    const balance = await getERC721Balance(account, contract);\n    const tokens: { [token: string]: { tokenURI: string } } = {};\n    for (let i = 0; i < Number(balance); i++) {\n      const tokenId = await getERC721TokenIdByIndex(account, contract, i);\n      const tokenURI = await getERC721TokenURI(contract, tokenId);\n      tokens[tokenId] = { tokenURI };\n    }\n    setBalance(balance);\n    setTokens(tokens);\n  }\n  async function updateWrapper() {\n    const wrapper = await getWrapper(contract);\n    const wokens: { [token: string]: { tokenURI: string, shares: string, balance: string, price: string } } = {};\n    if (wrapper !== '0x0000000000000000000000000000000000000000') {\n      const balance = await getERC721Balance(account, wrapper);\n      for (let i = 0; i < Number(balance); i++) {\n        const tokenId = await getERC721TokenIdByIndex(account, wrapper, i);\n        const tokenURI = await getERC721TokenURI(wrapper, tokenId);\n        const shares = await getShares(wrapper, tokenId);\n        const balance = await getERC20Balance(account, shares);\n        const price = await getSharePrice(shares);\n        wokens[tokenId] = { tokenURI, shares, balance, price };\n        await onAddToken(shares);\n      }\n    }\n    setWrapper(wrapper);\n    setWokens(wokens);\n  }\n  async function onTransfer(address: string) {\n    if (tokenId in tokens) await transferERC721(account, contract, address, tokenId);\n    if (tokenId in wokens) await transferERC721(account, wrapper, address, tokenId);\n    await updateBalance();\n    await updateWrapper();\n  }\n  async function onWrap(amount: string) {\n    await wrap(account, contract, tokenId, amount);\n    await updateBalance();\n    await updateWrapper();\n  }\n  async function onUnwrap(amount: string) {\n    const shares = await getShares(wrapper, tokenId);\n    await release(account, shares, amount);\n    await updateBalance();\n    await updateWrapper();\n  }\n  return (\n    <Card>\n      <Space direction=\"vertical\">\n        <Space>\n          <Avatar size=\"large\">{_symbol}</Avatar>\n          {name}\n        </Space>\n        <Divider plain>Content</Divider>\n        <Radio.Group onChange={(e) => setTokenId(e.target.value)} value={tokenId}>\n          <Space direction=\"vertical\">\n          {Object.keys(tokens).map((token, i) =>\n            <Radio value={token}>Token #{token}</Radio>\n          )}\n          {Object.keys(wokens).map((woken, i) =>\n            <Radio value={woken}>Securitized Token #{woken} [{wokens[woken].price} ETH/share]</Radio>\n          )}\n          </Space>\n        </Radio.Group>\n        <Divider>Actions</Divider>\n        {tokenId !== ''\n          ? <ERC721TransferForm onTransfer={onTransfer} />\n          : null\n        }\n        {tokens[tokenId]\n          ? <ERC721WrapForm onWrap={onWrap} />\n          : null\n        }\n        {wokens[tokenId]\n          ? <ERC721UnwrapForm onUnwrap={onUnwrap} />\n          : null\n        }\n        <ERC721ForgetForm contract={contract} onRemoveToken={onRemoveToken} />\n      </Space>\n    </Card>\n  );\n}\n\nfunction ERC721TransferForm({ onTransfer } : { onTransfer: (address: string) => Promise<void> }) {\n  const [address, setAddress] = useState('');\n  const [loading, setLoading] = useState(false);\n  async function onSubmit(event: React.FormEvent) {\n    if (event) event.preventDefault();\n    setLoading(true);\n    try {\n      const xaddress = await resolveName(address);\n      if (!isValidAddress(xaddress)) return;\n      await onTransfer(xaddress);\n      setAddress('');\n    } finally {\n      setLoading(false);\n    }\n  }\n  return (\n    <form onSubmit={onSubmit}>\n      <Space>\n        <Input addonBefore=\"@\" placeholder=\"receiver\" value={address} onChange={(e) => setAddress(e.target.value)} />\n        <Button loading={loading} htmlType=\"submit\">Transfer</Button>\n      </Space>\n    </form>\n  );\n}\n\nfunction ERC721WrapForm({ onWrap } : { onWrap: (amount: string) => Promise<void> }) {\n  const [amount, setAmount] = useState('');\n  const [loading, setLoading] = useState(false);\n  async function onSubmit(event: React.FormEvent) {\n    if (event) event.preventDefault();\n    setLoading(true);\n    try {\n      await onWrap(amount);\n      setAmount('');\n    } finally {\n      setLoading(false);\n    }\n  }\n  return (\n    <form onSubmit={onSubmit}>\n      <Space>\n        <Input addonAfter=\"ETH\" placeholder=\"exit price\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n        <Button loading={loading} htmlType=\"submit\">Securitize</Button>\n      </Space>\n    </form>\n  );\n}\n\nfunction ERC721UnwrapForm({ onUnwrap } : { onUnwrap: (amount: string) => Promise<void> }) {\n  const [amount, setAmount] = useState('');\n  const [loading, setLoading] = useState(false);\n  async function onSubmit(event: React.FormEvent) {\n    if (event) event.preventDefault();\n    setLoading(true);\n    try {\n      await onUnwrap(amount);\n      setAmount('');\n    } finally {\n      setLoading(false);\n    }\n  }\n  return (\n    <form onSubmit={onSubmit}>\n      <Space>\n        <Input addonAfter=\"ETH\" placeholder=\"premium\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n        <Button loading={loading} htmlType=\"submit\">Release</Button>\n      </Space>\n    </form>\n  );\n}\n\nfunction ERC721ForgetForm({ contract, onRemoveToken } : { contract: string; onRemoveToken: (contract: string) => Promise<void> }) {\n  const [loading, setLoading] = useState(false);\n  async function onSubmit(event: React.FormEvent) {\n    if (event) event.preventDefault();\n    setLoading(true);\n    try {\n      await onRemoveToken(contract);\n    } finally {\n      setLoading(false);\n    }\n  }\n  return (\n    <form onSubmit={onSubmit}>\n      <Space>\n        <Button type=\"primary\" shape=\"round\" loading={loading} htmlType=\"submit\">Forget Token</Button>\n      </Space>\n    </form>\n  );\n}\n\nfunction AddTokenForm({ onAddToken } : { onAddToken: (contract: string) => Promise<void> }) {\n  const [address, setAddress] = useState('');\n  const [loading, setLoading] = useState(false);\n  async function onSubmit(event: React.FormEvent) {\n    if (event) event.preventDefault();\n    setLoading(true);\n    try {\n      const xaddress = await resolveName(address);\n      if (!isValidAddress(xaddress)) return;\n      await onAddToken(xaddress);\n      setAddress('');\n    } finally {\n      setLoading(false);\n    }\n  }\n  return (\n      <form onSubmit={onSubmit}>\n        <Space>\n          <Input addonBefore=\"@\" placeholder=\"contract address\" value={address} onChange={(e) => setAddress(e.target.value)} />\n          <Button type=\"primary\" shape=\"round\" loading={loading} htmlType=\"submit\">Add Token</Button>\n        </Space>\n      </form>\n  );\n}\n\nfunction Wallet({ account }: { account: string }) {\n  const [contracts, setContracts] = useState<{ [address: string]: 'ERC20' | 'ERC721' }>(JSON.parse(localStorage.getItem('contracts') || '{}'));\n  useEffect(() => { localStorage.setItem('contracts', JSON.stringify(contracts)) }, [contracts]);\n  async function onAddToken(contract: string) {\n    const address = contract.toLowerCase();\n    if (contracts[address]) return;\n    let isNFT = false;\n    try { isNFT = await supportsERC721(contract); } catch (e) { }\n    setContracts({ ...contracts, [address]: isNFT ? 'ERC721' : 'ERC20' });\n  }\n  async function onRemoveToken(contract: string) {\n    const address = contract.toLowerCase();\n    if (!contracts[address]) return;\n    const copy = { ...contracts };\n    delete copy[address];\n    setContracts(copy);\n  }\n  return (\n    <Space direction=\"vertical\">\n      <AddTokenForm onAddToken={onAddToken} />\n      <ETHPanel account={account} />\n      {Object.keys(contracts).length > 0\n        ? Object.keys(contracts).map((contract, i) =>\n            <React.Fragment key={i}>\n            {contracts[contract] === 'ERC721'\n              ? <ERC721Panel account={account} contract={contract} onAddToken={onAddToken} onRemoveToken={onRemoveToken} />\n              : null\n            }\n            {contracts[contract] === 'ERC20'\n              ? <ERC20Panel account={account} contract={contract} onAddToken={onAddToken} onRemoveToken={onRemoveToken} />\n              : null\n            }\n            </React.Fragment>\n          )\n        : ''\n      }\n    </Space>\n  );\n}\n\nfunction AccountPanel({ account }: { account: string }) {\n  return (\n    <div className=\"AccountPanel\">\n      <Wallet account={account} />\n    </div>\n  );\n}\n\nfunction App() {\n  const [accounts, setAccounts] = useState<string[] | null>(null);\n  const [account, setAccount] = useState('');\n  useEffect(() => {\n    (async () => setAccounts(await getAccounts()))();\n  }, []);\n  useEffect(() => {\n    if (accounts === null) return;\n    if (accounts.length === 0) return;\n    setAccount(accounts[0]);\n  }, [accounts])\n  return (\n    <Layout>\n      <Header className=\"header\" style={{color:\"white\"}}>\n        <Space>\n        <img src=\"https://nftfy.tk/assets/images/logo.svg\" />\n        <strong>Wallet:</strong>\n        {accounts\n          ? (<Select value={account} onChange={(value) => setAccount(value)}>\n              {account === ''\n                ? (<Option key={0} value={''}>No account selected</Option>)\n                : null\n              }\n              {accounts.map((account, i) =>\n                <Option key={i+1} value={account}>{account}</Option>\n              )}\n            </Select>)\n          : 'No accounts available'\n        }\n        </Space>\n      </Header>\n      <Content>\n        {account\n          ? <AccountPanel account={account} />\n          : null\n        }\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Nftfy ©2020 Created by BH Hackers</Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}