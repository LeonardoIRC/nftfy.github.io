{"version":3,"sources":["assets/ft.svg","assets/nftfy.svg","assets/metamask.svg","assets/portis.svg","assets/ft-active.svg","assets/nft-active.svg","assets/nft.svg","services/api.ts","context/WalletContext.tsx","components/ContractSecuritization/ContractClaim/ContractClaim.tsx","components/ContractSecuritization/ContractData/ContractData.tsx","components/ContractSecuritization/ContractImage/ContractImage.tsx","components/ContractSecuritization/ContractRedeem/ContractRedeem.tsx","components/ContractSecuritization/ContractSecuritizationDetail/ContractSecuritizationDetail.tsx","services/notification.ts","components/ContractSecuritization/ContractSecuritizationEdit/ContractSecuritizationEdit.tsx","components/shared/layout/Footer/Footer.tsx","components/shared/layout/Header/Header.tsx","components/shared/modal/WalletManagerModal/WalletManagerModal.tsx","screens/ContractSecuritization/ContractSecuritization.tsx","components/FungibleTokens/FungibleTokensEmpty/FungibleTokensEmpty.tsx","components/FungibleTokens/FungibleTokensList/FungibleTokensList.tsx","components/FungibleTokens/FungibleTokens.tsx","components/NonFungibleTokens/AddNonFungibleTokens/AddNonFungibleTokens.tsx","components/NonFungibleTokens/NonFungibleTokensEmpty/NonFungibleTokensEmpty.tsx","components/NonFungibleTokens/NonFungibleTokensList/NonFungibleTokensList.tsx","components/NonFungibleTokens/NonFungibleTokens.tsx","screens/Home/Home.tsx","Routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","getWeb3","walletName","a","window","ethereum","enable","Web3","web3","Error","currentProvider","portis","Portis","provider","NFTFY_ABI","require","abi","ERC721_ABI","ERC20_ABI","listSupportedWallets","initializeWallet","nftfy","valid","coins","units","newERC721Item","newERC721","newERC20","getAccounts","selectAccount","validateAddress","getEtherBalance","listAccountShares","listAccountItems","retrieveItem","retrieveShares","registerERC721","listPaymentTokens","listNonFungibleTokens","contracts","network","push","address","contract","tokenId","offset","limit","items","count","subitems","subcount","concat","length","getWrapper","wrapper","listAllShares","Number","MAX_SAFE_INTEGER","subitem","getAccountBalance","decimals","Promise","resolve","reject","eth","getBalance","error","balance","utils","isAddress","account","accounts","getTotalSupply","validateAmount","getERC721Item","getPaymentToken","getExitPrice","getSharePrice","getSharesCount","isRedeemable","getAccountRedeemAmount","approve","redeem","isClaimable","getVaultBalance","getAccountVaultBalance","claim","methods","send","from","once","confNumber","receipt","paymentToken","vaultBalanceOf","call","vaultBalance","released","redeemAmount","value","Contract","redeemAmountOf","sharesCount","sharePrice","exitPrice","_abi","target","_address","amount","balanceOf","totalSupply","defaultName","defaultSymbol","defaultDecimals","name","symbol","getItem","listAllItems","historyLength","i","Math","min","historyAt","wrappers","tokenOfOwnerByIndex","self","tokenByIndex","getTokenURI","loadMetadata","getTokenOwner","isSecuritized","securitize","paymentDecimals","paymentAddress","item","securitized","ownerOf","CORS_PREFIX","uri","headers","axios","get","response","data","description","image","imageUri","console","log","message","tokenURI","indexOf","s","slice","repeat","padStart","RegExp","test","net","getNetworkType","WalletContext","React","createContext","undefined","setWalletName","wallet","setWallet","setAccounts","accountIndex","setAccountIndex","accountItems","setAccountItems","accountItemsCount","setAccountItemsCount","accountShares","setAccountShares","accountSharesCount","setAccountSharesCount","WalletContextWrapper","props","children","useState","rehydrate","setRehydrate","persistOffline","useCallback","localStorage","setItem","JSON","stringify","useEffect","rehydrateOffline","supportedWallets","walletNameStorage","includes","walletStorage","accountsStorage","accountIndexStorage","parse","Provider","ContractClaim","shares","receive","loading","dataSource","label","className","columns","dataIndex","key","pagination","rowKey","onClick","type","size","ContractData","title","ContractImage","meta","src","split","ft","alt","ContractRedeem","participation","shareBalance","pay","ContractSecuritizationDetail","useContext","contractImg","setContractImg","contractName","setContractName","contractDescription","setContractDescription","contractMeta","setContractMeta","setIsRedeemable","setIsClaimable","setTotalSupply","issuedShare","setIssuedShare","setExitPrice","setPay","setReceive","setLoading","location","useLocation","history","useHistory","contractId","pathname","find","accountShare","getContractImg","erc721","getContractData","redeemContract","claimContract","errorNotification","notification","placement","duration","Option","Select","ContractSecuritizationEdit","accountItem","paymentTokens","setPaymentTokens","setPaymentToken","tokens","selectAfter","defaultValue","onChange","map","paymentTokenItem","placeholder","addonAfter","event","payToken","showHeader","Footer","Header","buttonAction","dropdownMenu","_account","index","Item","to","ntfy","overlay","disabled","substring","DownOutlined","WalletManagerModal","visible","setVisible","setSupportedWallets","loadingWallet","setLoadingWallet","loadWallets","selectWallet","handleCancel","footer","onCancel","width","icon","metamask","height","ContractSecuritization","openWalletModal","setOpenWalletModal","openWalletManager","FungibleTokensEmpty","FungibleTokensList","setPagination","getAccountSharesCount","accountSharesItem","all","shareItem","erc721ImageUri","accountSharesItemPromise","page","setPage","current","total","pageNumber","FungibleTokens","setOffset","loadAccountShares","fts","offsetNumber","AddNonFungibleTokens","nftInput","setNftInput","addNft","nfts","NonFungibleTokensEmpty","nft","NonFungibleTokensList","NonFungibleTokens","loadAccountItems","Home","Routes","path","exact","component","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3b48ca44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ft.98b107db.svg\";","module.exports = __webpack_public_path__ + \"static/media/nftfy.2ed2b396.svg\";","module.exports = __webpack_public_path__ + \"static/media/metamask.0eb1e13c.svg\";","module.exports = __webpack_public_path__ + \"static/media/portis.3b1f54f7.svg\";","module.exports = __webpack_public_path__ + \"static/media/ft-active.2cab6182.svg\";","module.exports = __webpack_public_path__ + \"static/media/nft-active.65a241de.svg\";","module.exports = __webpack_public_path__ + \"static/media/nft.20bf0fe5.svg\";","/* eslint-disable */\nimport Portis from '@portis/web3'\nimport axios from 'axios'\nimport Web3 from 'web3'\n\ndeclare global {\n  interface Window {\n    ethereum: any\n    web3: any\n  }\n}\n\nexport type WalletName = 'metamask' | 'portis'\n\nexport interface Wallet {\n  network: string\n  getAccounts(): Promise<string[]>\n  selectAccount(address: string): Promise<void>\n  validateAddress(address: string): Promise<boolean>\n  getEtherBalance(address: string): Promise<string>\n  listAccountShares(address: string, offset: number, limit: number): Promise<{ items: ERC20[]; count: number }>\n  listAccountItems(address: string, offset: number, limit: number): Promise<{ items: ERC721Item[]; count: number }>\n  retrieveItem(address: string, tokenId: string): Promise<ERC721Item>\n  retrieveShares(address: string): Promise<ERC20>\n  registerERC721(address: string): Promise<boolean>\n  listPaymentTokens(): Promise<ERC20[]>\n}\n\nexport interface ERC20 {\n  address: string\n  name: string\n  symbol: string\n  decimals: number\n  getTotalSupply(): Promise<string>\n  getAccountBalance(address: string): Promise<string> // pegar numero de shares\n  validateAmount(amount: string): Promise<boolean>\n\n  // Nftfy extensions\n  getERC721Item(): Promise<ERC721Item>\n\n  getPaymentToken(): Promise<ERC20 | null> // pegar saldo da carteira (getAccountBalance),  se for null getEtherBalance da interface wallet\n  getExitPrice(): Promise<string>\n  getSharePrice(): Promise<string>\n  getSharesCount(): Promise<string> // total de shares  (fazer calculo percentual )\n\n  isRedeemable(): Promise<boolean>\n  getAccountRedeemAmount(address: string): Promise<string>\n  redeem(address: string): Promise<void>\n\n  isClaimable(): Promise<boolean>\n  getVaultBalance(): Promise<string>\n  getAccountVaultBalance(address: string): Promise<string>\n  claim(address: string): Promise<void>\n}\n\nexport interface ERC721 {\n  address: string\n  name: string\n  symbol: string\n  getItem(tokenId: string): Promise<ERC721Item>\n  listAllItems(offset: number, limit: number): Promise<{ items: ERC721Item[]; count: number }>\n  listAccountItems(address: string, offset: number, limit: number): Promise<{ items: ERC721Item[]; count: number }>\n\n  // Nftfy extensions\n  getWrapper(): Promise<ERC721 | null>\n  listAllShares(offset: number, limit: number): Promise<{ items: ERC20[]; count: number }>\n}\n\nexport interface ERC721Item {\n  contract: ERC721\n  tokenId: string\n  name?: string\n  description?: string\n  imageUri?: string\n  getTokenOwner(): Promise<string>\n\n  // Nftfy extensions\n  isSecuritized(): Promise<boolean> // 1\n  listAccountShares(address: string, offset: number, limit: number): Promise<{ items: ERC20[]; count: number }>\n  securitize(sharesCount: string, exitPrice: string, paymentToken: ERC20 | null): Promise<void> // 1\n}\n\nasync function getWeb3(walletName: WalletName): Promise<Web3> {\n  switch (walletName) {\n    case 'metamask':\n      if (window.ethereum) {\n        await window.ethereum.enable()\n        return new Web3(window.ethereum)\n      }\n      if (!window.web3) throw new Error('Unsupported wallet')\n      return new Web3(window.web3.currentProvider)\n    case 'portis':\n      const portis = new Portis('a0fa4f71-2d8e-4a67-baa6-33ab41c3ba26', 'mainnet')\n      return new Web3(portis.provider)\n  }\n}\n\nconst NFTFY_ABI = require('../contracts/Nftfy.json').abi\nconst ERC721_ABI = require('../contracts/ERC721Wrapper.json').abi\nconst ERC20_ABI = require('../contracts/ERC721Shares.json').abi\n\nexport async function listSupportedWallets(): Promise<WalletName[]> {\n  if (window.ethereum || window.web3) return ['metamask', 'portis']\n  return ['portis']\n}\n\nexport async function initializeWallet(walletName: WalletName): Promise<Wallet> {\n  let account = '0x0000000000000000000000000000000000000000'\n\n  const web3 = await getWeb3(walletName)\n  const network = await web3.eth.net.getNetworkType()\n  const contracts: ERC721[] = await listNonFungibleTokens()\n\n  async function nftfy(): Promise<string> {\n    switch (network) {\n      case 'main':\n        return '0x3BFFF8566fb6C2921be92bb86716469496aE1818'\n      case 'ropsten':\n        return '0x3BFFF8566fb6C2921be92bb86716469496aE1818'\n      case 'rinkeby':\n        return '0x3BFFF8566fb6C2921be92bb86716469496aE1818'\n      case 'kovan':\n        return '0x3BFFF8566fb6C2921be92bb86716469496aE1818'\n      case 'goerli':\n        return '0x3BFFF8566fb6C2921be92bb86716469496aE1818'\n    }\n    throw new Error('Unsupported network')\n  }\n\n  function valid(amount: string, decimals: number): boolean {\n    const regex = new RegExp(`^\\\\d+${decimals > 0 ? `(\\\\.\\\\d{1,${decimals}})?` : ''}$`)\n    return regex.test(amount)\n  }\n\n  function coins(units: string, decimals: number): string {\n    if (!valid(units, 0)) throw new Error('Invalid amount')\n    if (decimals == 0) return units;\n    const s = units.padStart(1 + decimals, '0')\n    return `${s.slice(0, -decimals)}.${s.slice(-decimals)}`\n  }\n\n  function units(coins: string, decimals: number): string {\n    if (!valid(coins, decimals)) throw new Error('Invalid amount')\n    let i = coins.indexOf('.')\n    if (i < 0) i = coins.length\n    const s = coins.slice(i + 1)\n    return coins.slice(0, i) + s + '0'.repeat(decimals - s.length)\n  }\n\n  async function newERC721Item(contract: ERC721, tokenId: string): Promise<ERC721Item> {\n    let self: ERC721Item\n\n    const { name, description, imageUri } = await loadMetadata()\n\n    function getTokenURI(): Promise<string> {\n      const abi = new web3.eth.Contract(ERC721_ABI, contract.address)\n      return abi.methods.tokenURI(tokenId).call()\n    }\n\n    async function loadMetadata(): Promise<{ name?: string; description?: string; imageUri?: string }> {\n      try {\n        const CORS_PREFIX = 'https://cors-anywhere.herokuapp.com/'\n        const uri = await getTokenURI()\n        const headers: { [key: string]: string } = {}\n        // headers.Origin = 'https://nftfy.tk'\n        const response = await axios.get(CORS_PREFIX + uri, { headers })\n        const { name, description, image } = response.data\n        const imageUri = image ? CORS_PREFIX + image : image\n        return { name, description, imageUri }\n      } catch (e) {\n        console.log('ERC721Item.loadMetadata', contract.address, tokenId, e.message)\n        return {}\n      }\n    }\n\n    function getTokenOwner(): Promise<string> {\n      const abi = new web3.eth.Contract(ERC721_ABI, contract.address)\n      return abi.methods.ownerOf(tokenId).call()\n    }\n\n    async function isSecuritized(): Promise<boolean> {\n      const wrapper = await contract.getWrapper()\n      if (wrapper == null) return false\n      const abi = new web3.eth.Contract(ERC721_ABI, wrapper.address)\n      return abi.methods.securitized(tokenId).call()\n    }\n\n    async function listAccountShares(address: string, offset: number, limit: number): Promise<{ items: ERC20[]; count: number }> {\n      if (offset < 0) throw new Error('Invalid offset')\n      if (limit < 0) throw new Error('Invalid limit')\n      const wrapper = await contract.getWrapper()\n      if (wrapper == null) return { items: [], count: 0 }\n      let items: ERC20[] = []\n      let count = 0\n      const { items: subitems, count: subcount } = await wrapper.listAllShares(0, Number.MAX_SAFE_INTEGER)\n      for (const subitem of subitems) {\n        const item = await subitem.getERC721Item()\n        const balance = await subitem.getAccountBalance(address)\n        if (item.tokenId == tokenId && balance != coins('0', subitem.decimals)) {\n          if (count == offset && limit > 0) {\n            items.push(subitem)\n            offset++\n            limit--\n          }\n          count++\n        }\n      }\n      return { items, count }\n    }\n\n    async function approve(address: string): Promise<void> {\n      const abi = new web3.eth.Contract(ERC721_ABI, contract.address)\n      return new Promise((resolve, reject) => {\n        abi.methods\n          .approve(address, tokenId)\n          .send({ from: account })\n          .once('confirmation', (confNumber: any, receipt: any) => resolve())\n          .once('error', reject)\n      })\n    }\n\n    async function securitize(sharesCount: string, exitPrice: string, paymentToken: ERC20 | null): Promise<void> {\n      const address = await nftfy()\n      const abi = new web3.eth.Contract(NFTFY_ABI, address)\n      const decimals = 0\n      const paymentDecimals = paymentToken ? paymentToken.decimals : 18\n      const paymentAddress = paymentToken ? paymentToken.address : '0x0000000000000000000000000000000000000000'\n      await approve(address)\n      return new Promise((resolve, reject) => {\n        abi.methods\n          .securitize(\n            contract.address,\n            tokenId,\n            units(sharesCount, decimals),\n            decimals,\n            units(exitPrice, paymentDecimals),\n            paymentAddress,\n            false\n          )\n          .send({ from: account })\n          .once('confirmation', (confNumber: any, receipt: any) => resolve())\n          .once('error', reject)\n      })\n    }\n\n    return (self = {\n      contract,\n      tokenId,\n      name,\n      description,\n      imageUri,\n      getTokenOwner,\n      isSecuritized,\n      listAccountShares,\n      securitize\n    })\n  }\n\n  async function newERC721(address: string, defaultName = '', defaultSymbol = ''): Promise<ERC721> {\n    let self: ERC721\n\n    const abi = new web3.eth.Contract(ERC721_ABI, address)\n    const name = await (async () => {\n      try {\n        return await abi.methods.name().call()\n      } catch (e) {\n        return defaultName\n      }\n    })()\n    const symbol = await (async () => {\n      try {\n        return await abi.methods.symbol().call()\n      } catch (e) {\n        return defaultSymbol\n      }\n    })()\n\n    function getItem(tokenId: string): Promise<ERC721Item> {\n      return newERC721Item(self, tokenId)\n    }\n\n    async function listAllItems(offset: number, limit: number): Promise<{ items: ERC721Item[]; count: number }> {\n      if (offset < 0) throw new Error('Invalid offset')\n      if (limit < 0) throw new Error('Invalid limit')\n      const items: ERC721Item[] = []\n      const count = Number(await abi.methods.totalSupply().call())\n      for (let i = offset; i < Math.min(offset + limit, count); i++) {\n        const tokenId = await abi.methods.tokenByIndex(i).call()\n        items.push(await newERC721Item(self, tokenId))\n      }\n      return { items, count }\n    }\n\n    async function listAccountItems(address: string, offset: number, limit: number): Promise<{ items: ERC721Item[]; count: number }> {\n      if (offset < 0) throw new Error('Invalid offset')\n      if (limit < 0) throw new Error('Invalid limit')\n      const items: ERC721Item[] = []\n      const count = Number(await abi.methods.balanceOf(address).call())\n      for (let i = offset; i < Math.min(offset + limit, count); i++) {\n        const tokenId = await abi.methods.tokenOfOwnerByIndex(address, i).call()\n        items.push(await newERC721Item(self, tokenId))\n      }\n      return { items, count }\n    }\n\n    async function getWrapper(): Promise<ERC721 | null> {\n      const abi = new web3.eth.Contract(NFTFY_ABI, await nftfy())\n      const _address = await abi.methods.wrappers(address).call()\n      if (_address == '0x0000000000000000000000000000000000000000') return null\n      return newERC721(_address)\n    }\n\n    async function listAllShares(offset: number, limit: number): Promise<{ items: ERC20[]; count: number }> {\n      if (offset < 0) throw new Error('Invalid offset')\n      if (limit < 0) throw new Error('Invalid limit')\n      const items: ERC20[] = []\n      const count = Number(await abi.methods.historyLength().call())\n      for (let i = offset; i < Math.min(offset + limit, count); i++) {\n        const address = await abi.methods.historyAt(i).call()\n        items.push(await newERC20(address))\n      }\n      return { items, count }\n    }\n\n    return (self = {\n      address,\n      name,\n      symbol,\n      getItem,\n      listAllItems,\n      listAccountItems,\n      getWrapper,\n      listAllShares\n    })\n  }\n\n  async function newERC20(address: string, defaultName = '', defaultSymbol = '', defaultDecimals = 18): Promise<ERC20> {\n    let self: ERC20\n\n    const abi = new web3.eth.Contract(ERC20_ABI, address)\n    const name = await (async () => {\n      try {\n        return await abi.methods.name().call()\n      } catch (e) {\n        return defaultName\n      }\n    })()\n    const symbol = await (async () => {\n      try {\n        return await abi.methods.symbol().call()\n      } catch (e) {\n        return defaultSymbol\n      }\n    })()\n    const decimals = await (async () => {\n      try {\n        return Number(await abi.methods.decimals().call())\n      } catch (e) {\n        return defaultDecimals\n      }\n    })()\n\n    async function getTotalSupply(): Promise<string> {\n      return coins(await abi.methods.totalSupply().call(), decimals)\n    }\n\n    async function getAccountBalance(address: string): Promise<string> {\n      return coins(await abi.methods.balanceOf(address).call(), decimals)\n    }\n\n    async function validateAmount(amount: string): Promise<boolean> {\n      return valid(amount, decimals)\n    }\n\n    async function getERC721Item(): Promise<ERC721Item> {\n      const address = await abi.methods.wrapper().call()\n      const tokenId = await abi.methods.tokenId().call()\n      const _abi = new web3.eth.Contract(ERC721_ABI, address)\n      const _address = await _abi.methods.target().call()\n      const contract = await newERC721(_address)\n      return newERC721Item(contract, tokenId)\n    }\n\n    async function getPaymentToken(): Promise<ERC20 | null> {\n      const address = await abi.methods.paymentToken().call()\n      if (address == '0x0000000000000000000000000000000000000000') return null\n      return newERC20(address)\n    }\n\n    async function getExitPrice(): Promise<string> {\n      const paymentToken = await getPaymentToken()\n      const decimals = paymentToken ? paymentToken.decimals : 18\n      return coins(await abi.methods.exitPrice().call(), decimals)\n    }\n\n    async function getSharePrice(): Promise<string> {\n      const paymentToken = await getPaymentToken()\n      const decimals = paymentToken ? paymentToken.decimals : 18\n      return coins(await abi.methods.sharePrice().call(), decimals)\n    }\n\n    async function getSharesCount(): Promise<string> {\n      const paymentToken = await getPaymentToken()\n      return coins(await abi.methods.sharesCount().call(), decimals)\n    }\n\n    async function isRedeemable(): Promise<boolean> {\n      return !(await abi.methods.released().call())\n    }\n\n    async function getAccountRedeemAmount(address: string): Promise<string> {\n      const paymentToken = await getPaymentToken()\n      const decimals = paymentToken ? paymentToken.decimals : 18\n      return coins(await abi.methods.redeemAmountOf(address).call(), decimals)\n    }\n\n    async function approve(paymentToken: ERC20, redeemAmount: string): Promise<void> {\n      const { decimals } = paymentToken\n      const abi = new web3.eth.Contract(ERC20_ABI, paymentToken.address)\n      return new Promise((resolve, reject) => {\n        abi.methods\n          .approve(address, units(redeemAmount, decimals))\n          .send({ from: account })\n          .once('confirmation', (confNumber: any, receipt: any) => resolve())\n          .once('error', reject)\n      })\n    }\n\n    async function redeem(address: string): Promise<void> {\n      const paymentToken = await getPaymentToken()\n      const redeemAmount = await getAccountRedeemAmount(account)\n      if (paymentToken == null) {\n        const decimals = 18\n        return new Promise((resolve, reject) => {\n          abi.methods\n            .redeem()\n            .send({ from: account, value: units(redeemAmount, decimals) })\n            .once('confirmation', (confNumber: any, receipt: any) => resolve())\n            .once('error', reject)\n        })\n      }\n      await approve(paymentToken, redeemAmount)\n      return new Promise((resolve, reject) => {\n        abi.methods\n          .redeem()\n          .send({ from: account })\n          .once('confirmation', (confNumber: any, receipt: any) => resolve())\n          .once('error', reject)\n      })\n    }\n\n    function isClaimable(): Promise<boolean> {\n      return abi.methods.released().call()\n    }\n\n    async function getVaultBalance(): Promise<string> {\n      const paymentToken = await getPaymentToken()\n      const decimals = paymentToken ? paymentToken.decimals : 18\n      return coins(await abi.methods.vaultBalance().call(), decimals)\n    }\n\n    async function getAccountVaultBalance(address: string): Promise<string> {\n      const paymentToken = await getPaymentToken()\n      const decimals = paymentToken ? paymentToken.decimals : 18\n      return coins(await abi.methods.vaultBalanceOf(address).call(), decimals)\n    }\n\n    function claim(address: string): Promise<void> {\n      return new Promise((resolve, reject) => {\n        abi.methods\n          .claim()\n          .send({ from: account })\n          .once('confirmation', (confNumber: any, receipt: any) => resolve())\n          .once('error', reject)\n      })\n    }\n\n    return (self = {\n      address,\n      name,\n      symbol,\n      decimals,\n      getTotalSupply,\n      getAccountBalance,\n      validateAmount,\n      getERC721Item,\n      getPaymentToken,\n      getExitPrice,\n      getSharePrice,\n      getSharesCount,\n      isRedeemable,\n      getAccountRedeemAmount,\n      redeem,\n      isClaimable,\n      getVaultBalance,\n      getAccountVaultBalance,\n      claim\n    })\n  }\n\n  function getAccounts(): Promise<string[]> {\n    return new Promise((resolve, reject) => {\n      web3.eth.getAccounts((error, accounts) => {\n        if (error) return reject(error)\n        return resolve(accounts)\n      })\n    })\n  }\n\n  async function selectAccount(address: string): Promise<void> {\n    if (!(await validateAddress(address))) throw new Error('Invalid address')\n    account = address\n  }\n\n  async function validateAddress(address: string): Promise<boolean> {\n    return web3.utils.isAddress(address)\n  }\n\n  function getEtherBalance(address: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      web3.eth.getBalance(address, 'latest', (error, balance) => {\n        if (error) return reject(error)\n        return resolve(coins(balance, 18))\n      })\n    })\n  }\n\n  async function listAccountShares(address: string, offset: number, limit: number): Promise<{ items: ERC20[]; count: number }> {\n    if (offset < 0) throw new Error('Invalid offset')\n    if (limit < 0) throw new Error('Invalid limit')\n    const items: ERC20[] = []\n    let count = 0\n    for (const contract of contracts) {\n      const wrapper = await contract.getWrapper()\n      if (wrapper == null) continue\n      const { items: subitems, count: subcount } = await wrapper.listAllShares(0, Number.MAX_SAFE_INTEGER)\n      for (const subitem of subitems) {\n        const balance = await subitem.getAccountBalance(address)\n        if (balance != coins('0', subitem.decimals)) {\n          if (count == offset && limit > 0) {\n            items.push(subitem)\n            offset++\n            limit--\n          }\n          count++\n        }\n      }\n    }\n    return { items, count }\n  }\n\n  async function listAccountItems(address: string, offset: number, limit: number): Promise<{ items: ERC721Item[]; count: number }> {\n    if (offset < 0) throw new Error('Invalid offset')\n    if (limit < 0) throw new Error('Invalid limit')\n    let items: ERC721Item[] = []\n    let count = 0\n    for (const contract of contracts) {\n      const { items: subitems, count: subcount } = await contract.listAccountItems(address, offset, limit)\n      items = items.concat(subitems)\n      count += subcount\n      offset += subitems.length\n      limit -= subitems.length\n      if (limit == 0) continue\n      offset -= subcount\n    }\n    return { items, count }\n  }\n\n  async function retrieveItem(address: string, tokenId: string): Promise<ERC721Item> {\n    const contract = await newERC721(address)\n    return newERC721Item(contract, tokenId)\n  }\n\n  function retrieveShares(address: string): Promise<ERC20> {\n    return newERC20(address)\n  }\n\n  async function registerERC721(address: string): Promise<boolean> {\n    for (const contract of contracts) {\n      if (address == contract.address) return false\n    }\n    contracts.push(await newERC721(address))\n    return true\n  }\n\n  async function listPaymentTokens(): Promise<ERC20[]> {\n    const contracts: ERC20[] = []\n    switch (network) {\n      case 'main':\n        contracts.push(await newERC20('0x6B175474E89094C44Da98b954EedeAC495271d0F')) // DAI\n        contracts.push(await newERC20('0xdAC17F958D2ee523a2206206994597C13D831ec7')) // USDT\n        contracts.push(await newERC20('0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599')) // WBTC\n        contracts.push(await newERC20('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2')) // WETH\n        break\n      case 'ropsten':\n        contracts.push(await newERC20('0x65628f950F79B3FaCE8d878d17D4221A27449acD')) // BUK\n        break\n      case 'rinkeby':\n        contracts.push(await newERC20('0x65628f950F79B3FaCE8d878d17D4221A27449acD')) // BUK\n        break\n      case 'kovan':\n        contracts.push(await newERC20('0x65628f950F79B3FaCE8d878d17D4221A27449acD')) // BUK\n        break\n      case 'goerli':\n        contracts.push(await newERC20('0x65628f950F79B3FaCE8d878d17D4221A27449acD')) // BUK\n        break\n    }\n    return contracts\n  }\n\n  async function listNonFungibleTokens(): Promise<ERC721[]> {\n    const contracts: ERC721[] = []\n    switch (network) {\n      case 'main':\n        // contracts.push(await newERC721('0x06012c8cf97BEaD5deAe237070F9587f8E7A266d')) // CK\n        contracts.push(await newERC721('0xc1Caf0C19A8AC28c41Fe59bA6c754e4b9bd54dE9')) // CriptoSkulls\n        // contracts.push(await newERC721('0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85', 'Ethereum Name Service', 'ENS')) // ENS\n        contracts.push(await newERC721('0x959e104E1a4dB6317fA58F8295F586e1A978c297')) // EST\n        contracts.push(await newERC721('0x4F41d10F7E67fD16bDe916b4A6DC3Dd101C57394')) // FLOWER\n        // contracts.push(await newERC721('0xF87E31492Faf9A91B02Ee0dEAAd50d51d56D5d4d')) // LAND\n        contracts.push(await newERC721('0xFBeef911Dc5821886e1dda71586d90eD28174B7d')) // KODA\n        contracts.push(await newERC721('0x913ae503153d9A335398D0785Ba60A2d63dDB4e2')) // PARCEL\n        contracts.push(await newERC721('0x22C1f6050E56d2876009903609a2cC3fEf83B415')) // POAP\n        contracts.push(await newERC721('0x60F80121C31A0d46B5279700f9DF786054aa5eE5')) // RARI\n        contracts.push(await newERC721('0xb932a70A57673d89f4acfFBE830E8ed7f75Fb9e0')) // SUPR\n        break\n      case 'ropsten':\n        // contracts.push(await newERC721('0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85', 'Ethereum Name Service', 'ENS')) // ENS\n        contracts.push(await newERC721('0x124bf28A423B2CA80B3846c3AA0eB944FE7EbB95')) // EST\n        // contracts.push(await newERC721('0x7A73483784ab79257bB11B96Fd62A2C3AE4Fb75B')) // LAND\n        contracts.push(await newERC721('0xE0394f4404182F537AC9F2F9695a4a4CD74a1ea3')) // KIE\n        contracts.push(await newERC721('0x29a3f97E9AC395E2E1BFa789bbBbb5468E6022af')) // KODA\n        break\n      case 'rinkeby':\n        // contracts.push(await newERC721('0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85', 'Ethereum Name Service', 'ENS')) // ENS\n        // contracts.push(await newERC721('0x28bEf22DF3e2040A4bE64A9Ca0e8b5Ae2B91462D')) // LAND\n        contracts.push(await newERC721('0xE0394f4404182F537AC9F2F9695a4a4CD74a1ea3')) // KIE\n        contracts.push(await newERC721('0x2Df6816286c583A7EF8637CD4b7Cc1CC62F6161E')) // KODA\n        contracts.push(await newERC721('0x913ae503153d9A335398D0785Ba60A2d63dDB4e2')) // PARCEL\n        break\n      case 'kovan':\n        // contracts.push(await newERC721('0x537263c440943f6a6808bCb8CcB3fe03EE838aD1')) // LAND\n        contracts.push(await newERC721('0xE0394f4404182F537AC9F2F9695a4a4CD74a1ea3')) // KIE\n        break\n      case 'goerli':\n        // contracts.push(await newERC721('0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85', 'Ethereum Name Service', 'ENS')) // ENS\n        contracts.push(await newERC721('0xE0394f4404182F537AC9F2F9695a4a4CD74a1ea3')) // KIE\n        break\n    }\n    return contracts\n  }\n\n  return {\n    network,\n    getAccounts,\n    selectAccount,\n    validateAddress,\n    getEtherBalance,\n    listAccountShares,\n    listAccountItems,\n    retrieveItem,\n    retrieveShares,\n    registerERC721,\n    listPaymentTokens\n  }\n}\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { ERC20, ERC721Item, initializeWallet, listSupportedWallets, Wallet, WalletName } from '../services/api'\n\nexport const WalletContext = React.createContext<{\n  walletName: WalletName | undefined\n  setWalletName: (walletName: WalletName) => void\n  wallet: Wallet | undefined\n  setWallet: (wallet: Wallet) => void\n  accounts: string[]\n  setAccounts: (accounts: string[]) => void\n  accountIndex: number\n  setAccountIndex: (index: number) => void\n  accountItems: ERC721Item[]\n  setAccountItems: (accountItems: ERC721Item[]) => void\n  accountItemsCount: number\n  setAccountItemsCount: (count: number) => void\n  accountShares: ERC20[]\n  setAccountShares: (accountShares: ERC20[]) => void\n  accountSharesCount: number\n  setAccountSharesCount: (count: number) => void\n}>({\n  walletName: undefined,\n  setWalletName: () => null,\n  wallet: undefined,\n  setWallet: () => null,\n  accounts: [],\n  setAccounts: () => null,\n  accountIndex: 0,\n  setAccountIndex: () => null,\n  accountItems: [],\n  setAccountItems: () => null,\n  accountItemsCount: 0,\n  setAccountItemsCount: () => null,\n  accountShares: [],\n  setAccountShares: () => null,\n  accountSharesCount: 0,\n  setAccountSharesCount: () => null\n})\n\nexport default function WalletContextWrapper(props: React.PropsWithChildren<{}>) {\n  const { children } = props\n\n  const [walletName, setWalletName] = useState<WalletName | undefined>(undefined)\n  const [wallet, setWallet] = useState<Wallet | undefined>(undefined)\n  const [accounts, setAccounts] = useState<string[]>([])\n  const [accountIndex, setAccountIndex] = useState<number>(0)\n  const [accountItems, setAccountItems] = useState<ERC721Item[]>([])\n  const [accountItemsCount, setAccountItemsCount] = useState<number>(0)\n  const [accountShares, setAccountShares] = useState<ERC20[]>([])\n  const [accountSharesCount, setAccountSharesCount] = useState<number>(0)\n  const [rehydrate, setRehydrate] = useState(true)\n\n  const persistOffline = useCallback(() => {\n    if (!rehydrate) {\n      if (walletName !== undefined) localStorage.setItem('walletName', walletName)\n      if (accountIndex !== undefined) localStorage.setItem('accountIndex', JSON.stringify(accountIndex))\n    }\n  }, [walletName, accountIndex, rehydrate])\n\n  useEffect(() => {\n    persistOffline()\n  }, [persistOffline])\n\n  const rehydrateOffline = useCallback(async () => {\n    if (rehydrate) {\n      const supportedWallets = await listSupportedWallets()\n\n      const walletNameStorage = localStorage.getItem('walletName')\n\n      if (walletNameStorage && supportedWallets.includes(walletNameStorage as WalletName)) {\n        const walletStorage = await initializeWallet(walletNameStorage as WalletName)\n        const accountsStorage = await walletStorage.getAccounts()\n\n        if (accountsStorage[0]) {\n          walletStorage.selectAccount(accountsStorage[0])\n        }\n\n        setWallet(walletStorage)\n        setWalletName(walletNameStorage as WalletName)\n        setAccounts(accountsStorage)\n\n        const accountIndexStorage = localStorage.getItem('accountIndex')\n        if (accountIndexStorage) setAccountIndex(Number(JSON.parse(accountIndexStorage)))\n      }\n\n      setRehydrate(false)\n    }\n  }, [rehydrate])\n\n  useEffect(() => {\n    rehydrateOffline()\n  }, [rehydrateOffline])\n\n  if (rehydrate) return null\n\n  return (\n    <WalletContext.Provider\n      value={{\n        walletName,\n        setWalletName,\n        wallet,\n        setWallet,\n        accounts,\n        setAccounts,\n        accountIndex,\n        setAccountIndex,\n        accountItems,\n        setAccountItems,\n        accountItemsCount,\n        setAccountItemsCount,\n        accountShares,\n        setAccountShares,\n        accountSharesCount,\n        setAccountSharesCount\n      }}>\n      {children}\n    </WalletContext.Provider>\n  )\n}\n","import { Button, Table } from 'antd'\nimport React from 'react'\nimport './ContractClaim.scss'\n\ninterface Props {\n  claim: () => void\n  shares: string\n  receive: string\n  loading: boolean\n}\n\nexport default function ContractClaim({ claim, shares, receive, loading }: Props) {\n  const columns = [\n    {\n      dataIndex: 'label',\n      key: 'label'\n    },\n    {\n      dataIndex: 'data',\n      key: 'data'\n    }\n  ]\n\n  const dataSource = [\n    {\n      label: 'Your Participation',\n      data: shares\n    },\n    {\n      label: 'Share Balance',\n      data: receive\n    }\n  ]\n\n  const handleClaim = () => {\n    claim()\n  }\n\n  return (\n    <div className='contract-redeem'>\n      <div className='title'>\n        <h2>Claim NFT</h2>\n      </div>\n      <Table dataSource={dataSource} columns={columns} pagination={false} rowKey='label' loading={loading} />\n      <Button onClick={handleClaim} type='primary' size='large'>\n        Claim\n      </Button>\n    </div>\n  )\n}\n","import { Table } from 'antd'\nimport React from 'react'\nimport './ContractData.scss'\n\ninterface Props {\n  name: string\n  totalSupply: string\n  exitPrice: string\n  address: string\n}\n\nexport default function ContractData({ name, totalSupply, exitPrice, address }: Props) {\n  const columns = [\n    {\n      title: 'Share Contract Name',\n      dataIndex: 'label',\n      key: 'label'\n    },\n    {\n      title: name,\n      dataIndex: 'data',\n      key: 'data'\n    }\n  ]\n\n  const dataSource = [\n    {\n      label: 'ERC20 Address',\n      data: address\n    },\n    {\n      label: 'Total Supply',\n      data: totalSupply\n    },\n    {\n      label: 'Exit Price',\n      data: exitPrice\n    }\n  ]\n\n  return (\n    <div className='contract-data'>\n      <div className='title'>\n        <h2>Contract Data</h2>\n      </div>\n      <Table dataSource={dataSource} columns={columns} pagination={false} rowKey='label' />\n    </div>\n  )\n}\n","import React from 'react'\nimport ft from '../../../assets/ft.svg'\nimport './ContractImage.scss'\n\ninterface Props {\n  name: string\n  meta: string\n  description: string\n  src: string\n}\n\nexport default function ContractImage({ name, meta, description, src }: Props) {\n  return (\n    <div className='contract-image-item'>\n      <div>\n        <img src={src.split('https://cors-anywhere.herokuapp.com/')[1] || src || ft} alt={name} />\n        <div className='contract-name'>{name}</div>\n        <div className='contract-meta'>{meta}</div>\n        <div className='contract-description'>{description}</div>\n      </div>\n    </div>\n  )\n}\n","import { Button, Table } from 'antd'\nimport React from 'react'\nimport './ContractRedeem.scss'\n\ninterface Props {\n  redeem: () => void\n  participation: string\n  shareBalance: string\n  pay: string\n  loading: boolean\n}\n\nexport default function ContractRedeem({ redeem, participation, shareBalance, pay, loading }: Props) {\n  const columns = [\n    {\n      dataIndex: 'label',\n      key: 'label'\n    },\n    {\n      dataIndex: 'data',\n      key: 'data'\n    }\n  ]\n\n  const dataSource = [\n    {\n      label: 'Your Participation',\n      data: participation\n    },\n    {\n      label: 'Share Balance',\n      data: shareBalance\n    },\n    {\n      label: 'Pay Amount',\n      data: pay\n    }\n  ]\n\n  const handleRedeem = () => {\n    redeem()\n  }\n\n  return (\n    <div className='contract-redeem'>\n      <div className='title'>\n        <h2>Redeem NFT</h2>\n      </div>\n      <Table dataSource={dataSource} columns={columns} pagination={false} rowKey='label' />\n      <Button onClick={handleRedeem} type='primary' size='large' loading={loading}>\n        Redeem\n      </Button>\n    </div>\n  )\n}\n","import { Card } from 'antd'\nimport React, { useCallback, useContext, useEffect, useState } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { WalletContext } from '../../../context/WalletContext'\nimport ContractClaim from '../ContractClaim/ContractClaim'\nimport ContractData from '../ContractData/ContractData'\nimport ContractImage from '../ContractImage/ContractImage'\nimport ContractRedeem from '../ContractRedeem/ContractRedeem'\nimport './ContractSecuritizationDetail.scss'\n\nexport default function ContractSecuritizationDetail() {\n  const { accountShares, accountIndex, accounts } = useContext(WalletContext)\n  const [contractImg, setContractImg] = useState<string>('')\n  const [contractName, setContractName] = useState<string>('')\n  const [contractDescription, setContractDescription] = useState('')\n  const [contractMeta, setContractMeta] = useState('')\n  const [isRedeemable, setIsRedeemable] = useState(false)\n  const [isClaimable, setIsClaimable] = useState(false)\n\n  const [totalSupply, setTotalSupply] = useState('')\n  const [issuedShare, setIssuedShare] = useState('')\n  const [exitPrice, setExitPrice] = useState('')\n  const [pay, setPay] = useState('')\n  const [receive, setReceive] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const location = useLocation()\n  const history = useHistory()\n  const contractId = location.pathname.split('/contract/detail/')[1]\n\n  const contract = accountShares.find(accountShare => accountShare.address === contractId)\n\n  if (!contract) history.push('/')\n\n  const getContractImg = useCallback(async () => {\n    if (contract) {\n      const erc721 = await contract.getERC721Item()\n      setContractImg(erc721.imageUri || '')\n      setContractDescription(erc721.description || '')\n      setContractMeta(`#${erc721?.tokenId}`)\n      setContractName(erc721.name || '')\n    }\n  }, [contract])\n\n  const getContractData = useCallback(async () => {\n    if (contract) {\n      setIsRedeemable(await contract.isRedeemable())\n      setIsClaimable(await contract.isClaimable())\n      setIssuedShare(await contract.getAccountBalance(accounts[accountIndex]))\n      setExitPrice(await contract.getExitPrice())\n      setTotalSupply(await contract.getTotalSupply())\n      setReceive(await contract.getVaultBalance())\n      setPay(`${await contract.getAccountRedeemAmount(accounts[accountIndex])} ${(await contract.getPaymentToken())?.symbol || 'ETH'}`)\n    }\n  }, [contract, accounts, accountIndex])\n\n  useEffect(() => {\n    getContractImg()\n    getContractData()\n  }, [getContractImg, getContractData])\n\n  const redeemContract = async () => {\n    if (contract && redeemContract) {\n      setLoading(true)\n      await contract.redeem(accounts[accountIndex])\n      setIsRedeemable(false)\n      setLoading(false)\n      history.push('/')\n    }\n  }\n\n  const claimContract = async () => {\n    if (contract && claimContract) {\n      setLoading(true)\n      await contract.claim(accounts[accountIndex])\n      setIsClaimable(false)\n      setLoading(false)\n      history.push('/')\n    }\n  }\n\n  return (\n    <Card className='contract-securitization-detail'>\n      <div className='content'>\n        <div className='contract-image'>\n          {contractImg && <ContractImage name={contractName} meta={contractMeta} description={contractDescription} src={contractImg} />}\n        </div>\n        {contract && (\n          <div className='contract-item'>\n            {isRedeemable && (\n              <div className='contract-redeem-item'>\n                <ContractRedeem\n                  redeem={redeemContract}\n                  participation={`${(issuedShare && totalSupply && (Number(issuedShare) / Number(totalSupply)) * 100) || 100}%`}\n                  shareBalance={issuedShare}\n                  pay={pay}\n                  loading={loading}\n                />\n              </div>\n            )}\n\n            {isClaimable && (\n              <div className='contract-claim-item'>\n                <ContractClaim claim={claimContract} receive={receive} shares={issuedShare} loading={loading} />\n              </div>\n            )}\n            <div className='contract-data-item'>\n              <ContractData name={contract?.name || ''} totalSupply={totalSupply} exitPrice={exitPrice} address={contract.address} />\n            </div>\n          </div>\n        )}\n      </div>\n    </Card>\n  )\n}\n","import { notification } from 'antd'\n\nexport const errorNotification = (message: string) => {\n  notification.error({\n    message,\n    placement: 'bottomLeft',\n    duration: 2\n  })\n}\n","import { Button, Card, Input, Select, Table } from 'antd'\nimport React, { useCallback, useContext, useEffect, useState } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { WalletContext } from '../../../context/WalletContext'\nimport { ERC20 } from '../../../services/api'\nimport { errorNotification } from '../../../services/notification'\nimport ContractImage from '../ContractImage/ContractImage'\nimport './ContractSecuritizationEdit.scss'\n\nconst { Option } = Select\n\nexport default function ContractSecuritizationEdit() {\n  const { accountItems } = useContext(WalletContext)\n  const [loading, setLoading] = useState(false)\n\n  const location = useLocation()\n  const history = useHistory()\n  const contractId = location.pathname.split('/contract/securitize/')[1]\n\n  const contract = accountItems.find(accountItem => accountItem.tokenId === contractId)\n\n  if (!contract) history.push('/')\n\n  const { wallet } = useContext(WalletContext)\n\n  const [paymentTokens, setPaymentTokens] = useState<ERC20[]>([])\n  const [exitPrice, setExitPrice] = useState<string | undefined>(undefined)\n  const [paymentToken, setPaymentToken] = useState<string | undefined>(undefined)\n  const shares = '1000000'\n\n  const listPaymentTokens = useCallback(async () => {\n    if (wallet) {\n      const tokens = await wallet.listPaymentTokens()\n      setPaymentTokens(tokens)\n    }\n  }, [wallet])\n\n  useEffect(() => {\n    listPaymentTokens()\n  }, [listPaymentTokens])\n\n  const handleExitPrice = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setExitPrice(event.target.value)\n  }\n\n  const handlePaymentToken = (value: string) => {\n    setPaymentToken(value)\n  }\n\n  const selectAfter = (\n    <Select defaultValue='ETH' className='select-after' value={paymentToken} onChange={handlePaymentToken}>\n      <Option value=''>ETH</Option>\n      {paymentTokens.map(paymentTokenItem => (\n        <Option key={paymentTokenItem.symbol} value={paymentTokenItem.symbol}>\n          {paymentTokenItem.symbol}\n        </Option>\n      ))}\n    </Select>\n  )\n  const columns = [\n    {\n      dataIndex: 'label',\n      key: 'label'\n    },\n    {\n      dataIndex: 'data',\n      key: 'data'\n    }\n  ]\n  const dataSource = [\n    {\n      label: 'Shares',\n      data: shares\n    },\n    {\n      label: 'Exit Price',\n      data: <Input placeholder='0.00000000' addonAfter={selectAfter} type='number' value={exitPrice} onChange={handleExitPrice} />\n    }\n  ]\n  const securitize = async () => {\n    if (Number(exitPrice) < 0) {\n      errorNotification(\"Exit price can't no be negative\")\n    }\n\n    if (contract && shares && exitPrice) {\n      setLoading(true)\n      await contract.securitize(shares, exitPrice, paymentTokens.find(payToken => payToken.symbol === paymentToken) || null)\n      setLoading(false)\n      history.push(`/`)\n    }\n  }\n\n  return (\n    <Card className='contract-securitization-edit'>\n      <div className='content'>\n        <div className='contract-image'>\n          <ContractImage\n            name={contract?.name || ''}\n            src={contract?.imageUri?.split('https://cors-anywhere.herokuapp.com/')[1] || ''}\n            description={contract?.description || ''}\n            meta={`#${contract?.tokenId}`}\n          />\n        </div>\n        <div className='securitization-form'>\n          <div className='title'>\n            <h2>Securitize ERC721 Contract</h2>\n          </div>\n          <Table dataSource={dataSource} columns={columns} pagination={false} showHeader={false} rowKey='label' />\n          <Button onClick={securitize} type='primary' size='large' loading={loading}>\n            Securitize\n          </Button>\n        </div>\n      </div>\n    </Card>\n  )\n}\n","import React from 'react'\nimport './Footer.scss'\n\nexport default function Footer() {\n  return <footer>© 2020 Nftfy</footer>\n}\n","import { DownOutlined } from '@ant-design/icons'\nimport { Button, Dropdown, Menu } from 'antd'\nimport React, { useContext } from 'react'\nimport { Link } from 'react-router-dom'\nimport ntfy from '../../../../assets/nftfy.svg'\nimport { WalletContext } from '../../../../context/WalletContext'\nimport './Header.scss'\n\ninterface Props {\n  buttonAction: () => void\n}\n\nexport default function Header(props: Props) {\n  const { buttonAction } = props\n  const { accounts, accountIndex, setAccountIndex, wallet } = useContext(WalletContext)\n  const selectAccount = (index: number) => {\n    if (wallet) {\n      wallet.selectAccount(accounts[index])\n    }\n    setAccountIndex(index)\n  }\n  const dropdownMenu = (\n    <Menu>\n      {accounts.map((_account, index) => (\n        <Menu.Item key={`account-${accounts[index]}`} onClick={() => selectAccount(index)}>\n          {accounts[index]}\n        </Menu.Item>\n      ))}\n    </Menu>\n  )\n\n  return (\n    <header className='header'>\n      <div className='logo'>\n        <Link to='/'>\n          <img src={ntfy} alt='NTFFY' />\n        </Link>\n      </div>\n      <div className='wallet'>\n        {accounts.length > 0 && (\n          <Dropdown overlay={dropdownMenu} placement='bottomRight' disabled={accounts.length === 1}>\n            <Button className='walletName'>\n              {accounts[accountIndex].substring(0, 6)}\n              ...\n              {accounts[accountIndex].substring(accounts[accountIndex].length - 4, accounts[accountIndex].length)}\n              {accounts.length > 1 && <DownOutlined />}\n            </Button>\n          </Dropdown>\n        )}\n        {!accounts.length && (\n          <Button onClick={buttonAction} type='primary' size='large'>\n            Connect Wallet\n          </Button>\n        )}\n      </div>\n    </header>\n  )\n}\n","import { Button, Modal } from 'antd'\nimport React, { useCallback, useContext, useEffect, useState } from 'react'\nimport metamask from '../../../../assets/metamask.svg'\nimport portis from '../../../../assets/portis.svg'\nimport { WalletContext } from '../../../../context/WalletContext'\nimport { initializeWallet, listSupportedWallets, WalletName } from '../../../../services/api'\nimport './WalletManagerModal.scss'\n\ninterface Props {\n  visible: boolean\n  setVisible: (visible: boolean) => void\n}\nexport default function WalletManagerModal(props: Props) {\n  const { visible, setVisible } = props\n  const { setAccounts, setWalletName, setWallet } = useContext(WalletContext)\n\n  const [supportedWallets, setSupportedWallets] = useState<WalletName[]>([])\n  const [loadingWallet, setLoadingWallet] = useState<WalletName | undefined>(undefined)\n\n  const loadWallets = useCallback(async () => {\n    setSupportedWallets(await listSupportedWallets())\n  }, [setSupportedWallets])\n\n  useEffect(() => {\n    loadWallets()\n  }, [loadWallets])\n\n  const selectWallet = (walletName: WalletName) => async () => {\n    setLoadingWallet(walletName)\n\n    const wallet = await initializeWallet(walletName)\n    const accounts = await wallet.getAccounts()\n\n    if (accounts[0]) {\n      wallet.selectAccount(accounts[0])\n    }\n\n    setWallet(wallet)\n    setWalletName(walletName)\n    setAccounts(accounts)\n\n    handleCancel()\n  }\n\n  const handleCancel = () => {\n    setVisible(false)\n    setLoadingWallet(undefined)\n  }\n\n  return (\n    <Modal className='wallet-manager-modal' title='Wallet Manager' visible={visible} footer={null} onCancel={handleCancel} width={300}>\n      {supportedWallets.includes('metamask') && (\n        <Button\n          className='metamask'\n          size='large'\n          icon={<img src={metamask} alt='Metamask' width={24} height={25} />}\n          onClick={selectWallet('metamask')}\n          loading={loadingWallet === 'metamask'}>\n          Metamask\n        </Button>\n      )}\n      {supportedWallets.includes('portis') && (\n        <Button\n          className='portis'\n          size='large'\n          icon={<img src={portis} alt='Metamask' width={24} height={25} />}\n          onClick={selectWallet('portis')}\n          loading={loadingWallet === 'portis'}>\n          Portis\n        </Button>\n      )}\n    </Modal>\n  )\n}\n","import React, { useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport ContractSecuritizationDetail from '../../components/ContractSecuritization/ContractSecuritizationDetail/ContractSecuritizationDetail'\nimport ContractSecuritizationEdit from '../../components/ContractSecuritization/ContractSecuritizationEdit/ContractSecuritizationEdit'\nimport Footer from '../../components/shared/layout/Footer/Footer'\nimport Header from '../../components/shared/layout/Header/Header'\nimport WalletManagerModal from '../../components/shared/modal/WalletManagerModal/WalletManagerModal'\nimport './ContractSecuritization.scss'\n\nexport default function ContractSecuritization() {\n  const [openWalletModal, setOpenWalletModal] = useState(false)\n  const location = useLocation()\n\n  const openWalletManager = () => {\n    setOpenWalletModal(!openWalletModal)\n  }\n\n  return (\n    <main className='contract-securitization'>\n      <Header buttonAction={openWalletManager} />\n      {location.pathname.includes('/contract/securitize') && <ContractSecuritizationEdit />}\n      {location.pathname.includes('/contract/detail') && <ContractSecuritizationDetail />}\n      <Footer />\n      <WalletManagerModal visible={openWalletModal} setVisible={openWalletManager} />\n    </main>\n  )\n}\n","import { Card } from 'antd'\nimport React from 'react'\nimport ft from '../../../assets/ft.svg'\nimport './FungibleTokensEmpty.scss'\n\nexport default function FungibleTokensEmpty() {\n  return (\n    <Card className='fungible-tokens-empty'>\n      <img src={ft} alt='Fungible Token' />\n      <p>You need to convert some Non-Fungible Token into Fungible Token</p>\n    </Card>\n  )\n}\n","import { Card, Pagination } from 'antd'\nimport React, { useCallback, useContext, useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { WalletContext } from '../../../context/WalletContext'\nimport { ERC20 } from '../../../services/api'\nimport './FungibleTokensList.scss'\n\ninterface Props {\n  count: number\n  setPagination: (offset: number) => void\n}\n\nexport default function FungibleTokensList({ count, setPagination }: Props) {\n  const { accountShares, accounts, accountIndex } = useContext(WalletContext)\n\n  const [accountSharesCount, setAccountSharesCount] = useState<Array<ERC20 & { sharesCount: string; erc721ImageUri: string }>>([])\n\n  const getAccountSharesCount = useCallback(\n    async (accountSharesItem: ERC20[]) => {\n      const accountSharesItemPromise = await Promise.all(\n        accountSharesItem.map(async shareItem => {\n          const sharesCount = await shareItem.getAccountBalance(accounts[accountIndex])\n\n          const erc721 = await shareItem.getERC721Item()\n\n          return { ...shareItem, sharesCount, erc721ImageUri: erc721.imageUri || '' }\n        })\n      )\n\n      setAccountSharesCount(accountSharesItemPromise)\n    },\n    [accountIndex, accounts]\n  )\n\n  useEffect(() => {\n    getAccountSharesCount(accountShares)\n  }, [accountShares, getAccountSharesCount])\n\n  const [page, setPage] = useState(1)\n\n  const setPageNumber = (pageNumber: number) => {\n    setPage(pageNumber)\n    setPagination(pageNumber * 8 - 8)\n  }\n\n  return (\n    <Card className='ft-list-container'>\n      <div className='ft-list'>\n        {accountSharesCount.map(ft => (\n          <Link key={ft.address} to={`/contract/detail/${ft.address}`}>\n            <div className='ft-item'>\n              <div>\n                {ft.erc721ImageUri && (\n                  <img src={ft.erc721ImageUri.split('https://cors-anywhere.herokuapp.com/')[1] || ft.erc721ImageUri} alt={ft.name} />\n                )}\n              </div>\n              <div>\n                <div className='ft-name'>{ft.name}</div>\n                <div className='ft-shares'>{`${ft.sharesCount} ${ft.symbol}`}</div>\n              </div>\n            </div>\n          </Link>\n        ))}\n      </div>\n      {count > 8 && (\n        <div className='ft-pagination'>\n          <Pagination size='small' current={page} total={count} onChange={setPageNumber} />\n        </div>\n      )}\n    </Card>\n  )\n}\n","import React, { useCallback, useContext, useEffect, useState } from 'react'\nimport { WalletContext } from '../../context/WalletContext'\nimport FungibleTokensEmpty from './FungibleTokensEmpty/FungibleTokensEmpty'\nimport FungibleTokensList from './FungibleTokensList/FungibleTokensList'\n\nexport default function FungibleTokens() {\n  const { wallet, accounts, accountIndex, accountShares, setAccountShares, setAccountSharesCount, accountSharesCount } = useContext(\n    WalletContext\n  )\n\n  const [offset, setOffset] = useState(0)\n\n  const setPagination = (offsetNumber: number) => {\n    setOffset(offsetNumber)\n  }\n\n  const loadAccountShares = useCallback(async () => {\n    if (wallet) {\n      const fts = await wallet.listAccountShares(accounts[accountIndex], offset, 8)\n\n      setAccountShares(fts.items)\n      setAccountSharesCount(fts.count)\n    }\n  }, [accountIndex, accounts, wallet, setAccountShares, setAccountSharesCount, offset])\n  useEffect(() => {\n    loadAccountShares()\n  }, [loadAccountShares])\n\n  if (!accountShares.length) {\n    return <FungibleTokensEmpty />\n  }\n\n  return <FungibleTokensList setPagination={setPagination} count={accountSharesCount} />\n}\n","import { Button, Input } from 'antd'\nimport React, { useContext, useState } from 'react'\nimport { WalletContext } from '../../../context/WalletContext'\nimport { errorNotification } from '../../../services/notification'\nimport './AddNonFungibleTokens.scss'\n\nexport default function AddNonFungibleTokens() {\n  const [loading, setLoading] = useState(false)\n  const { accounts, accountIndex, wallet, setAccountItems, setAccountItemsCount, setAccountShares, setAccountSharesCount } = useContext(\n    WalletContext\n  )\n\n  const [nftInput, setNftInput] = useState('')\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNftInput(event.target.value)\n  }\n\n  const addNft = async () => {\n    if (!nftInput.length) {\n      errorNotification('NFT Hash is empty')\n    } else if (wallet && !(await wallet.validateAddress(nftInput))) {\n      errorNotification('NFT Hash is invalid')\n    } else if (wallet) {\n      await wallet.registerERC721(nftInput)\n\n      if (wallet) {\n        setLoading(false)\n        const nfts = await wallet.listAccountItems(accounts[accountIndex], 0, 12)\n        if (nfts.items.length > 0) {\n          setAccountItems(nfts.items)\n          setAccountItemsCount(nfts.count)\n        }\n\n        const fts = await wallet.listAccountShares(accounts[accountIndex], 0, 8)\n        if (fts.items.length > 0) {\n          setAccountShares(fts.items)\n          setAccountSharesCount(fts.count)\n        }\n        setLoading(true)\n      }\n    }\n  }\n\n  return (\n    <div className='add-non-fungible-form'>\n      <Input placeholder='NFT Hash' disabled={!accounts[accountIndex]} onChange={handleInput} value={nftInput} />\n      <Button type='primary' disabled={!accounts[accountIndex]} onClick={addNft} loading={loading}>\n        Set NFT\n      </Button>\n    </div>\n  )\n}\n","import { Card } from 'antd'\nimport React, { useContext } from 'react'\nimport nft from '../../../assets/nft.svg'\nimport { WalletContext } from '../../../context/WalletContext'\nimport AddNonFungibleTokens from '../AddNonFungibleTokens/AddNonFungibleTokens'\nimport './NonFungibleTokensEmpty.scss'\n\nexport default function NonFungibleTokensEmpty() {\n  const { accounts, accountIndex } = useContext(WalletContext)\n\n  return (\n    <Card className='non-fungible-tokens-empty'>\n      <img src={nft} alt='Non Fungible Token' />\n      {!accounts[accountIndex] ? (\n        <p>Connect your Ethereum Wallet to set Non-Fungible Tokens</p>\n      ) : (\n        <p>Input your Non Fungible Token Hash on the form</p>\n      )}\n      <AddNonFungibleTokens />\n    </Card>\n  )\n}\n","import { Card, Pagination } from 'antd'\nimport React, { useContext, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { WalletContext } from '../../../context/WalletContext'\nimport AddNonFungibleTokens from '../AddNonFungibleTokens/AddNonFungibleTokens'\nimport './NonFungibleTokensList.scss'\n\ninterface Props {\n  count: number\n  setPagination: (offset: number) => void\n}\n\nexport default function NonFungibleTokensList({ count, setPagination }: Props) {\n  const { accountItems } = useContext(WalletContext)\n  const [page, setPage] = useState(1)\n\n  const setPageNumber = (pageNumber: number) => {\n    setPage(pageNumber)\n    setPagination(pageNumber * 12 - 12)\n  }\n\n  return (\n    <Card className='nft-list-container'>\n      <AddNonFungibleTokens />\n      <div className='nft-list'>\n        {accountItems.map(nft => (\n          <Link key={nft.tokenId} to={`/contract/securitize/${nft.tokenId}`}>\n            <div className='nft-item'>\n              {nft.imageUri && <img src={nft.imageUri.split('https://cors-anywhere.herokuapp.com/')[1] || nft.imageUri} alt={nft.name} />}\n              <div className='contract-name'>{nft.contract.name}</div>\n              <div className='nft-name'>{nft.name}</div>\n            </div>\n          </Link>\n        ))}\n      </div>\n      {count > 12 && (\n        <div className='nft-pagination'>\n          <Pagination size='small' current={page} total={count} onChange={setPageNumber} />\n        </div>\n      )}\n    </Card>\n  )\n}\n","import React, { useCallback, useContext, useEffect, useState } from 'react'\nimport { WalletContext } from '../../context/WalletContext'\nimport NonFungibleTokensEmpty from './NonFungibleTokensEmpty/NonFungibleTokensEmpty'\nimport NonFungibleTokensList from './NonFungibleTokensList/NonFungibleTokensList'\n\nexport default function NonFungibleTokens() {\n  const { wallet, accounts, accountIndex, accountItems, accountItemsCount, setAccountItems, setAccountItemsCount } = useContext(\n    WalletContext\n  )\n\n  const [offset, setOffset] = useState(0)\n\n  const setPagination = (offsetNumber: number) => {\n    setOffset(offsetNumber)\n  }\n\n  const loadAccountItems = useCallback(async () => {\n    if (wallet) {\n      const nfts = await wallet.listAccountItems(accounts[accountIndex], offset, 12)\n      if (nfts.items.length > 0) {\n        setAccountItems(nfts.items)\n        setAccountItemsCount(nfts.count)\n      }\n    }\n  }, [accountIndex, accounts, wallet, setAccountItems, offset, setAccountItemsCount])\n\n  useEffect(() => {\n    loadAccountItems()\n  }, [loadAccountItems])\n\n  if (!accountItems.length) {\n    return <NonFungibleTokensEmpty />\n  }\n\n  return <NonFungibleTokensList setPagination={setPagination} count={accountItemsCount} />\n}\n","import React, { useState } from 'react'\nimport ft from '../../assets/ft-active.svg'\nimport nft from '../../assets/nft-active.svg'\nimport FungibleTokens from '../../components/FungibleTokens/FungibleTokens'\nimport NonFungibleTokens from '../../components/NonFungibleTokens/NonFungibleTokens'\nimport Footer from '../../components/shared/layout/Footer/Footer'\nimport Header from '../../components/shared/layout/Header/Header'\nimport WalletManagerModal from '../../components/shared/modal/WalletManagerModal/WalletManagerModal'\nimport './Home.scss'\n\nexport default function Home() {\n  const [openWalletModal, setOpenWalletModal] = useState(false)\n\n  const openWalletManager = () => {\n    setOpenWalletModal(!openWalletModal)\n  }\n  return (\n    <main className='home'>\n      <Header buttonAction={openWalletManager} />\n      <div className='content'>\n        <div className='nft'>\n          <h2>\n            <img src={nft} alt='Non-Fungible Token' />\n            Non-Fungible Tokens ERC721\n          </h2>\n          <NonFungibleTokens />\n        </div>\n        <div className='ft'>\n          <h2>\n            <img src={ft} alt='Fungible Token' />\n            Fungible Tokens ERC20\n          </h2>\n          <FungibleTokens />\n        </div>\n      </div>\n      <Footer />\n      <WalletManagerModal visible={openWalletModal} setVisible={openWalletManager} />\n    </main>\n  )\n}\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport ContractSecuritization from './screens/ContractSecuritization/ContractSecuritization'\nimport Home from './screens/Home/Home'\n\nexport default function Routes() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path='/' exact component={Home} />\n        <Route path='/contract/securitize/:id' component={ContractSecuritization} />\n        <Route path='/contract/detail/:id' component={ContractSecuritization} />\n        <Route path='*' component={Home} />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n","import React from 'react'\nimport WalletContextWrapper from './context/WalletContext'\nimport Routes from './Routes'\n\nfunction App() {\n  return (\n    <WalletContextWrapper>\n      <Routes />\n    </WalletContextWrapper>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(`This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA`)\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(`New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.`)\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import 'antd/dist/antd.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './styles.scss'\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.register()\n"],"sourceRoot":""}